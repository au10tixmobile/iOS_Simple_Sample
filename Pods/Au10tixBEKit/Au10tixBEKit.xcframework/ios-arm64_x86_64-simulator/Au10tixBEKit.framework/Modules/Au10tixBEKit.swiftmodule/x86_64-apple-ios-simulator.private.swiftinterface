// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixBEKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import Au10tixBEKit
import Au10tixCore
import CoreImage
import Foundation
import Swift
import SystemConfiguration
import _Concurrency
import _StringProcessing
public enum Au10tixBackendProcessingFlow {
  case idv
  case f2f
  case poa
  case nfc
  public static func == (a: Au10tixBEKit.Au10tixBackendProcessingFlow, b: Au10tixBEKit.Au10tixBackendProcessingFlow) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class IDVFactory : Au10tixBEKit.BOSInteractorFactory {
  public init(dataTypes: [Au10tixBEKit.DataType])
  public func provideSdcFront(image: Au10tixCore.Au10Image)
  public func provideSdcBack(image: Au10tixCore.Au10Image)
  public func providePfl(image: Au10tixCore.Au10Image)
  public func providePoa(image: Au10tixCore.Au10Image)
  public func provideAfl(dictionary: [Swift.String : Swift.String])
  public func providePersonalDetails(firstName: Swift.String, lastName: Swift.String, address: Swift.String)
  public func provideIdData(idData: Au10tixCore.BeginProcessingIdentityDataForDataVerification)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class F2FFactory : Au10tixBEKit.BOSInteractorFactory {
  public init()
  public func providePfl(image: Au10tixCore.Au10Image)
  public func provideComparison(image: Foundation.Data)
  @objc deinit
}
public enum Au10tixBEKitError : Swift.Error {
  case missingData
  case coreIsInactive
  case networkError(error: Swift.Error)
  case serializationError(error: Swift.Error)
  case parseError(error: Swift.Error)
  case cancelled
}
@objc public enum DataType : Swift.Int, Swift.CaseIterable {
  case pfl
  case idDocFront
  case idDocBack
  case imageForCompare
  case poa
  case nfcDG1
  case personalDetails
  case afl
  case secondImageForCompare
  case pflScreenRecording
  case aflScreenRecording
  case nfcDG2
  case nfcDG7
  case pc
  case vc
  case vs
  case idData
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Au10tixBEKit.DataType]
  public typealias RawValue = Swift.Int
  public static var allCases: [Au10tixBEKit.DataType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public typealias Au10tixBEKitCallback = (Swift.Result<Swift.String, Au10tixBEKit.Au10tixBEKitError>) -> Swift.Void
@_hasMissingDesignatedInitializers @objc public class Au10tixBackendKit : ObjectiveC.NSObject, Au10tixCore.Au10tixSDK {
  @objc public var shouldAutoUpload: Swift.Bool {
    get
  }
  public var poaUploadOnly: Swift.Bool {
    get
  }
  @objc public static let shared: Au10tixBEKit.Au10tixBackendKit
  public func shouldUploadMediaAutomatically(_ auto: Swift.Bool)
  public func shouldOnlyUploadPOA(_ uploadOnly: Swift.Bool)
  public func send(factory: Au10tixBEKit.BOSInteractorFactory, info: Au10tixCore.RequestDataBuilder.BosTagInfo = nil, beKitCallback: @escaping Au10tixBEKit.Au10tixBEKitCallback)
  public func uploadMediaOf(type: Au10tixBEKit.DataType, flow: Au10tixBEKit.Au10tixBackendProcessingFlow? = nil, completion: ((Au10tixBEKit.Au10tixBEKitError?) -> Swift.Void)? = nil)
  public func uploadAllMedias(flow: Au10tixBEKit.Au10tixBackendProcessingFlow? = nil, completion: ((Au10tixBEKit.Au10tixBEKitError?) -> Swift.Void)? = nil)
  public func sendIDVerificationFlow(dataTypes: [Au10tixBEKit.DataType]? = nil, info: Au10tixCore.RequestDataBuilder.BosTagInfo = nil, personalData: Au10tixCore.BeginProcessingPersonalDataForDataVerification? = nil, identityData: Au10tixCore.BeginProcessingIdentityDataForDataVerification? = nil, beKitCallback: @escaping Au10tixBEKit.Au10tixBEKitCallback)
  public func sendFaceToFace(photoForComparison: Foundation.Data, info: Au10tixCore.RequestDataBuilder.BosTagInfo = nil, beKitCallback: @escaping Au10tixBEKit.Au10tixBEKitCallback)
  public func sendProofOfAddress(firstName: Swift.String, lastName: Swift.String, address: Swift.String, info: Au10tixCore.RequestDataBuilder.BosTagInfo = nil, beKitCallback: @escaping Au10tixBEKit.Au10tixBEKitCallback)
  public func sendPassportNfc(info: Au10tixCore.RequestDataBuilder.BosTagInfo = nil, beKitCallback: @escaping Au10tixBEKit.Au10tixBEKitCallback)
  public func cancelRequest()
  public func cleanCache()
  public func destroy()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BOSInteractorFactory {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class BOSInteractorCache : ObjectiveC.NSObject {
  @objc public static let shared: Au10tixBEKit.BOSInteractorCache
  @objc public func append(dict: Foundation.NSDictionary, type: Foundation.NSNumber)
  @objc public func retrieveMediaForType(_ type: Foundation.NSNumber) -> Foundation.NSDictionary?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class BECoreHelper : ObjectiveC.NSObject {
  @objc public static var shouldAutoUpload: Foundation.NSNumber {
    @objc get
  }
  @objc public static func uploadMedia(type: Foundation.NSNumber)
  @objc override dynamic public init()
  @objc deinit
}
extension Au10tixBEKit.Au10tixBackendProcessingFlow : Swift.Equatable {}
extension Au10tixBEKit.Au10tixBackendProcessingFlow : Swift.Hashable {}
extension Au10tixBEKit.DataType : Swift.Equatable {}
extension Au10tixBEKit.DataType : Swift.Hashable {}
extension Au10tixBEKit.DataType : Swift.RawRepresentable {}
