// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixBEKit
@_exported import Au10tixBEKit
import Au10tixCore
import CoreImage
import Foundation
import Swift
import SystemConfiguration
import _Concurrency
@_hasMissingDesignatedInitializers public class IDVFactory : Au10tixBEKit.BOSInteractorFactory {
  public init(dataTypes: [Au10tixBEKit.DataType])
  public func provideSdcFront(image: Au10tixCore.Au10Image)
  public func provideSdcBack(image: Au10tixCore.Au10Image)
  public func providePfl(image: Au10tixCore.Au10Image)
  public func providePoa(image: Au10tixCore.Au10Image)
  public func provideAfl(dictionary: [Swift.String : Swift.String])
  @objc deinit
}
@_hasMissingDesignatedInitializers public class F2FFactory : Au10tixBEKit.BOSInteractorFactory {
  public init()
  public func providePfl(image: Au10tixCore.Au10Image)
  public func provideComparison(image: Foundation.Data)
  @objc deinit
}
public enum Au10tixBEKitError : Swift.Error {
  case missingData
  case coreIsInactive
  case networkError(error: Swift.Error)
  case serializationError(error: Swift.Error)
  case parseError(error: Swift.Error)
  case cancelled
}
public enum DataType : Swift.Int {
  case pfl
  case idDocFront
  case idDocBack
  case imageForCompare
  case poa
  case nfcDG1
  case personalDetails
  case afl
  case secondImageForCompare
  case pflScreenRecording
  case aflScreenRecording
  case nfcDG2
  case nfcDG7
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public typealias Au10tixBEKitCallback = (Swift.Result<Swift.String, Au10tixBEKit.Au10tixBEKitError>) -> Swift.Void
@_hasMissingDesignatedInitializers @objc public class Au10tixBackendKit : ObjectiveC.NSObject, Au10tixCore.Au10tixSDK {
  @objc public var shouldAutoUpload: Swift.Bool {
    get
  }
  public var poaUploadOnly: Swift.Bool {
    get
  }
  @objc public static let shared: Au10tixBEKit.Au10tixBackendKit
  public func shouldUploadMediaAutomatically(_ auto: Swift.Bool)
  public func shouldOnlyUploadPOA(_ uploadOnly: Swift.Bool)
  public func send(factory: Au10tixBEKit.BOSInteractorFactory, beKitCallback: @escaping Au10tixBEKit.Au10tixBEKitCallback)
  public func uploadMediaOf(type: Au10tixBEKit.DataType, completion: ((Au10tixBEKit.Au10tixBEKitError?) -> Swift.Void)? = nil)
  public func uploadAllMedias(completion: ((Au10tixBEKit.Au10tixBEKitError?) -> Swift.Void)? = nil)
  public func sendIDVerificationFlow(dataTypes: [Au10tixBEKit.DataType] = [.idDocFront], beKitCallback: @escaping Au10tixBEKit.Au10tixBEKitCallback)
  public func sendFaceToFace(photoForComparison: Foundation.Data, beKitCallback: @escaping Au10tixBEKit.Au10tixBEKitCallback)
  public func sendProofOfAddress(firstName: Swift.String, lastName: Swift.String, address: Swift.String, beKitCallback: @escaping Au10tixBEKit.Au10tixBEKitCallback)
  public func sendPassportNfc(beKitCallback: @escaping Au10tixBEKit.Au10tixBEKitCallback)
  public func cancelRequest()
  public func cleanCache()
  public func destroy()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BOSInteractorFactory {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class BOSInteractorCache : ObjectiveC.NSObject {
  @objc public static let shared: Au10tixBEKit.BOSInteractorCache
  @objc public func append(dict: Foundation.NSDictionary, type: Foundation.NSNumber)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class BECoreHelper : ObjectiveC.NSObject {
  @objc public static var shouldAutoUpload: Foundation.NSNumber {
    @objc get
  }
  @objc public static func uploadMedia(type: Foundation.NSNumber)
  @objc override dynamic public init()
  @objc deinit
}
extension Au10tixBEKit.DataType : Swift.Equatable {}
extension Au10tixBEKit.DataType : Swift.Hashable {}
extension Au10tixBEKit.DataType : Swift.RawRepresentable {}
