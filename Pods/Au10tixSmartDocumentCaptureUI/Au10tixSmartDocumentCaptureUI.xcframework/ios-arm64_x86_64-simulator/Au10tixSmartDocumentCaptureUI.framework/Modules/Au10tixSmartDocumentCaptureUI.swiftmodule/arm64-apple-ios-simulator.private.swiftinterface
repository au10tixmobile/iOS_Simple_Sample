// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixSmartDocumentCaptureUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Au10tixBaseUI
import Au10tixCore
import Au10tixSmartDocumentCaptureKit
@_exported import Au10tixSmartDocumentCaptureUI
import Au10tixSourceManager
import Foundation
import NaturalLanguage
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
@_inheritsConvenienceInitializers @objc(Au10xSDCViewController) @_Concurrency.MainActor(unsafe) @_objcRuntimeName(Au10xSDCViewController) final public class SDCViewController : Au10tixBaseUI.UIComponentBaseViewController, Au10tixCore.FrontSideSupporter {
  @_Concurrency.MainActor(unsafe) weak final public var sdcDelegate: Au10tixSmartDocumentCaptureKit.SDCSessionDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) weak final public var ocrUIDelegate: Au10tixSmartDocumentCaptureUI.OCRUIDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var isFrontSide: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var localClassification: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var uiFlow: Au10tixSmartDocumentCaptureUI.SDCUIFlow
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) override final public func close()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc required public init(configs: Au10tixBaseUI.UIComponentConfigs = super, navigationDelegate: Au10tixBaseUI.UIComponentViewControllerNavigationDelegate? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum SDCUIFlow {
  case standart
  case ocr
  public static func == (a: Au10tixSmartDocumentCaptureUI.SDCUIFlow, b: Au10tixSmartDocumentCaptureUI.SDCUIFlow) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol OCRUIDelegate : AnyObject {
  func ocrUIDidConclude(with ocrResult: Au10tixSmartDocumentCaptureKit.OCRConfirmation)
}
extension Au10tixSmartDocumentCaptureUI.SDCUIFlow : Swift.Equatable {}
extension Au10tixSmartDocumentCaptureUI.SDCUIFlow : Swift.Hashable {}
