// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixProofOfAddressKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Au10tixCore
@_exported import Au10tixProofOfAddressKit
import Au10tixSourceManager
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public enum POASessionError : Swift.Error {
  case timedout
  case sessionTokenExpired
  case offline
  public static func == (a: Au10tixProofOfAddressKit.POASessionError, b: Au10tixProofOfAddressKit.POASessionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol POASessionDelegate : AnyObject {
  func poaSession(_ poaSession: Au10tixProofOfAddressKit.POASession, didFailWith error: Au10tixProofOfAddressKit.POASessionError)
  func poaSession(_ poaSession: Au10tixProofOfAddressKit.POASession, didCapture image: Au10tixCore.Au10Image, with frameData: Au10tixCore.Au10Update)
}
@_hasMissingDesignatedInitializers public class POASession : Au10tixCore.Au10tixSession, Au10tixCore.CameraSession, Au10tixCore.ImageProvidableSession {
  public var isAvailable: Swift.Bool {
    get
  }
  public var isCameraActive: Swift.Bool {
    get
  }
  public var authenticator: Au10tixCore.Au10tixSessionAuthenticator
  weak public var delegate: Au10tixProofOfAddressKit.POASessionDelegate?
  convenience public init()
  public func set(responseQueue: Dispatch.DispatchQueue)
  public func start(with token: Swift.String, previewView: UIKit.UIView, refresh: Swift.Bool = true, didStartHandler: @escaping (Swift.Result<Swift.String, Au10tixCore.Au10tixCorePrepareError>) -> Swift.Void)
  public func stop()
  public func captureImage(_ source: Au10tixCore.Au10ImageSource)
  public func pauseCamera()
  public func resumeCamera(_ refresh: Swift.Bool = true)
  public func provide(image: Foundation.Data, exif: [Swift.String : Any], orientation: ImageIO.CGImagePropertyOrientation)
  @objc deinit
}
extension Au10tixProofOfAddressKit.POASession : Au10tixCore.TimeoutableSessionDelegate {
  public func sessionTimedout(_ timeoutable: Au10tixCore.Timeoutable)
}
extension Au10tixProofOfAddressKit.POASessionError : Swift.Equatable {}
extension Au10tixProofOfAddressKit.POASessionError : Swift.Hashable {}
