// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixNFCPassportKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Au10tixCore
@_exported import Au10tixNFCPassportKit
import Au10tixSourceManager
import CommonCrypto
import CoreNFC
import CryptoKit
import CryptoTokenKit
import Foundation
import OpenSSL
import Swift
import UIKit
import Vision
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class NFCPassportSession : Au10tixCore.Au10tixSession, Au10tixCore.CameraSession, Au10tixCore.NFCPassportReaderSession {
  public var isAvailable: Swift.Bool {
    get
  }
  public var isCameraActive: Swift.Bool {
    get
  }
  public var uiLicenseKey: Swift.String {
    get
    set
  }
  public var authenticator: Au10tixCore.Authenticator & Au10tixCore.BearerTokenAdvertizer & Au10tixCore.SessionDetailsAdvertizer
  weak public var delegate: Au10tixNFCPassportKit.NFCPassportSessionDelegate?
  weak public var dataSource: Au10tixNFCPassportKit.NFCPassportSessionDataSource?
  convenience public init()
  public func set(responseQueue: Dispatch.DispatchQueue)
  public func start(with token: Swift.String, previewView: UIKit.UIView, refresh: Swift.Bool = true, didStartHandler: @escaping (Swift.Result<Swift.String, Au10tixCore.Au10tixCorePrepareError>) -> Swift.Void)
  public func stop()
  public func captureImage(_ source: Au10tixCore.Au10ImageSource)
  public func pauseCamera()
  public func resumeCamera(_ refresh: Swift.Bool = true)
  public func readNFC(with mrz: Swift.String)
  public func detectMRZ(in image: Au10tixCore.Au10Image)
  @objc deinit
}
extension Au10tixNFCPassportKit.NFCPassportSession : Au10tixCore.TimeoutableSessionDelegate {
  public func sessionTimedout(_ timeoutable: Au10tixCore.Timeoutable)
}
public struct NFCLogManager {
  public static var shared: Au10tixNFCPassportKit.NFCLogManager
  public enum Category : Swift.String {
    case error
    case introPage
    case introPagePassport
    case introPageID
    case scanner
    case readerIntroPage
    case reader
    case chipReadingComplete
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
extension Au10tixCore.SDKLogEvent {
  convenience public init(category: Au10tixNFCPassportKit.NFCLogManager.Category, action: Au10tixCore.Log.Action, isUi: Swift.Bool = false)
}
@objc public protocol NFCPassportSessionDataSource {
  @objc func passportNFCReaderMessageForSearchingNFC() -> Swift.String
  @objc func passportNFCReaderMessageForChipAuthentication(with progress: Swift.Int) -> Swift.String
  @objc func passportNFCReaderMessageFor(reading dataGroup: Swift.String, with progress: Swift.Int) -> Swift.String
  @objc func passportNFCReaderMessageForAuthenticatingPassport(with progress: Swift.Int) -> Swift.String
}
public struct QKMRZResult {
  public let documentType: Swift.String
  public let countryCode: Swift.String
  public let surnames: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String
  public let nationalityCountryCode: Swift.String
  public let birthdate: Foundation.Date?
  public let sex: Swift.String?
  public let expiryDate: Foundation.Date?
  public let personalNumber: Swift.String
  public let personalNumber2: Swift.String?
  public let isDocumentNumberValid: Swift.Bool
  public let isBirthdateValid: Swift.Bool
  public let isExpiryDateValid: Swift.Bool
  public let isPersonalNumberValid: Swift.Bool?
  public let allCheckDigitsValid: Swift.Bool
}
@_hasMissingDesignatedInitializers @objc public class PassportInformation : ObjectiveC.NSObject {
  final public let dataGroups: Au10tixNFCPassportKit.PassportDataGroups
  final public let personalNumber: Swift.String
  final public let documentNumber: Swift.String
  final public let issuingAuthority: Swift.String
  final public let documentExpiryDate: Swift.String
  final public let dateOfBirth: Swift.String
  final public let gender: Swift.String
  final public let nationality: Swift.String
  final public let lastName: Swift.String
  final public let firstName: Swift.String
  final public let passportMRZ: Swift.String
  final public let passportImage: UIKit.UIImage?
  final public let signatureImage: UIKit.UIImage?
  @objc deinit
}
public enum NFCPassportSessionError : Swift.Error {
  case timedout
  case sessionTokenExpired
  case nfcExtractionFailed(error: Swift.Error?)
  case mrzDetectionError
  case offline
  public var asNFCPassportReaderError: Au10tixNFCPassportKit.NFCPassportReaderError? {
    get
  }
}
public protocol NFCPassportSessionDelegate : AnyObject {
  func nfcPassportSession(_ nfcPassportSession: Au10tixNFCPassportKit.NFCPassportSession, didScan passportMRZ: Swift.String, in frame: CoreImage.CIImage)
  func nfcPassportSession(_ nfcPassportSession: Au10tixNFCPassportKit.NFCPassportSession, didIndicate extractionProgress: Swift.String, of extractionPhase: Swift.String?)
  func nfcPassportSession(_ nfcPassportSession: Au10tixNFCPassportKit.NFCPassportSession, didExtract nfcInfo: Au10tixNFCPassportKit.PassportInformation)
  func nfcPassportSession(_ nfcPassportSession: Au10tixNFCPassportKit.NFCPassportSession, didFailWith error: Au10tixNFCPassportKit.NFCPassportSessionError)
  func nfcPassportSession(_ nfcPassportSession: Au10tixNFCPassportKit.NFCPassportSession, didIndicate dataGroupsFound: [Swift.String])
}
public class QKMRZParser {
  public init(ocrCorrection: Swift.Bool = false)
  public func parse(mrzLines: [Swift.String]) -> Au10tixNFCPassportKit.QKMRZResult?
  public func parse(mrzString: Swift.String) -> Au10tixNFCPassportKit.QKMRZResult?
  @objc deinit
}
@objc public class PassportDataGroups : ObjectiveC.NSObject {
  final public let dg1: Foundation.Data
  final public let dg2: Foundation.Data
  final public let dg7: Foundation.Data
  final public let dg14: Foundation.Data
  public init(dg1: Foundation.Data, dg2: Foundation.Data, dg7: Foundation.Data, dg14: Foundation.Data)
  @objc deinit
}
@available(iOS 13, macOS 10.15, *)
public enum NFCPassportReaderError : Swift.Error {
  case ResponseError(Swift.String, Swift.UInt8, Swift.UInt8)
  case InvalidResponse
  case UnexpectedError
  case NFCNotSupported
  case NoConnectedTag
  case D087Malformed
  case InvalidResponseChecksum
  case MissingMandatoryFields
  case CannotDecodeASN1Length
  case InvalidASN1Value
  case UnableToProtectAPDU
  case UnableToUnprotectAPDU
  case UnsupportedDataGroup
  case DataGroupNotRead
  case UnknownTag
  case UnknownImageFormat
  case NotImplemented
  case TagNotValid
  case ConnectionError
  case UserCanceled
  case InvalidMRZKey
  case MoreThanOneTagFound
  case InvalidHashAlgorithmSpecified
  case InvalidDataPassed(Swift.String)
  case NotYetSupported(Swift.String)
}
@available(iOS 13, macOS 10.15, *)
extension Au10tixNFCPassportKit.NFCPassportReaderError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension Au10tixNFCPassportKit.NFCLogManager.Category : Swift.Equatable {}
extension Au10tixNFCPassportKit.NFCLogManager.Category : Swift.Hashable {}
extension Au10tixNFCPassportKit.NFCLogManager.Category : Swift.RawRepresentable {}
