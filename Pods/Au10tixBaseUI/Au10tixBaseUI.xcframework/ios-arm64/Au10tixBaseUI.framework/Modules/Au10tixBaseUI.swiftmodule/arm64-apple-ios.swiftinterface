// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixBaseUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
@_exported import Au10tixBaseUI
import Au10tixCore
import CoreGraphics
import Foundation
import Photos
import PhotosUI
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public class AnnunciationAlert : Au10tixBaseUI.Alert {
  public init(title: Swift.String? = nil, icon: Au10tixBaseUI.Alert.Icon? = nil, message: Swift.String? = nil, actions: [Au10tixBaseUI.AlertAction] = [])
  @objc deinit
}
public class BulletsAlert : Au10tixBaseUI.Alert {
  public init(body: Au10tixBaseUI.BulletBody? = nil, actions: [Au10tixBaseUI.AlertAction] = [])
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class SpacePreviewView : Au10tixBaseUI.BaseUIView {
  @_Concurrency.MainActor(unsafe) public init(height: CoreFoundation.CGFloat)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class DynamicUIImageView : UIKit.UIImageView {
  @_Concurrency.MainActor(unsafe) final public var asset: Au10tixBaseUI.DynamicUIImage {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(asset: Au10tixBaseUI.DynamicUIImage, placeHolder: Au10tixBaseUI.DynamicUIImageView.PlaceHolder? = nil)
  @_Concurrency.MainActor(unsafe) @objc override final public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override final public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension Au10tixBaseUI.DynamicUIImageView {
  public enum PlaceHolder : Swift.String {
    case regular
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct ToastViewDatasource {
  public struct TransitionAnimation {
    public init(keyFrame: Swift.String? = nil, duration: Foundation.TimeInterval? = nil, backgroundTransitionColor: UIKit.UIColor? = nil)
  }
  public init(text: Swift.String, icon: Swift.String? = nil, transitionAnimation: Au10tixBaseUI.ToastViewDatasource.TransitionAnimation? = nil, font: UIKit.UIFont? = nil, textColor: UIKit.UIColor? = nil, backgroundColor: UIKit.UIColor? = nil, cornersRadius: CoreFoundation.CGFloat? = nil, shadowColor: UIKit.UIColor? = .black)
}
@objc @_inheritsConvenienceInitializers public class ImagePicker : ObjectiveC.NSObject {
  public struct LibraryImageResult {
    public let data: Foundation.Data
    public let exif: [Swift.String : Any]
    public let orientation: ImageIO.CGImagePropertyOrientation
  }
  public enum LibraryImageError : Swift.Error {
    case unAuthorized
    case cancelled
    case failedToRetreiveAsset
    public static func == (a: Au10tixBaseUI.ImagePicker.LibraryImageError, b: Au10tixBaseUI.ImagePicker.LibraryImageError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias LibraryImageCompletion = (Swift.Result<Au10tixBaseUI.ImagePicker.LibraryImageResult, Au10tixBaseUI.ImagePicker.LibraryImageError>) -> Swift.Void
  public func selectImageFromLibrary(on presenter: UIKit.UIViewController, with completion: @escaping Au10tixBaseUI.ImagePicker.LibraryImageCompletion)
  @objc deinit
  @objc override dynamic public init()
}
extension Au10tixBaseUI.ImagePicker : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DynamicUIImageManager : Au10tixBaseUI.DynamicAssetManager<Au10tixBaseUI.DynamicUIImage, Au10tixBaseUI.DynamicUIImageInfo> {
  public static var shared: Au10tixBaseUI.DynamicUIImageManager
  @objc public static var sharedObject: ObjectiveC.NSObject {
    @objc get
  }
  @objc final public func updatePersistentData(completion: @escaping () -> Swift.Void)
  final public func clearCache()
  @objc deinit
}
public class Alert {
  public init(style: Au10tixBaseUI.Alert.Style, actions: [Au10tixBaseUI.AlertAction])
  @objc deinit
}
extension Au10tixBaseUI.Alert {
  public enum Icon {
    case timeout
    case issue
    case bullet
    case custom(_: Au10tixBaseUI.DynamicUIImage)
  }
  public enum Style {
    case system
    case annunciation
    case bullet
    public static func == (a: Au10tixBaseUI.Alert.Style, b: Au10tixBaseUI.Alert.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public class PhotoPermissionManager : Au10tixBaseUI.PermissionManager {
  public init()
  public func requestPermission(_ completion: @escaping (Au10tixBaseUI.PermissionStatus) -> ())
  @objc deinit
}
public class ScheduledLock {
  public typealias Handler = ((Foundation.TimeInterval) -> ())
  public var isLocked: Swift.Bool
  public var remaining: Swift.Double {
    get
  }
  public init()
  public func lockFor(_ seconds: Foundation.TimeInterval, progress: Au10tixBaseUI.ScheduledLock.Handler? = nil, completion: Au10tixBaseUI.ScheduledLock.Handler? = nil)
  public func stop()
  public func clear()
  @objc deinit
}
public struct PreviewPage {
  public init(items: [Au10tixBaseUI.PreviewItem], sidePadding: CoreFoundation.CGFloat = 0)
}
public struct DynamicUIImageInfo : Au10tixBaseUI.DynamicAssetInfo {
  public typealias T = Au10tixBaseUI.DynamicUIImageInfo.ThemeImagePath
  public typealias D = Au10tixBaseUI.DynamicUIImageInfo.ThemeImageData
  public var key: Swift.String?
  public var lastUpdate: Swift.String?
  public var dataPaths: [Au10tixBaseUI.DynamicUIImageInfo.ThemeImagePath]?
  public var dataArray: [Au10tixBaseUI.DynamicUIImageInfo.ThemeImageData]?
  public var destinations: [Au10tixBaseUI.DynamicAssetDestination]?
  public struct ThemeImageData : Swift.Codable, Swift.Equatable {
    public static func == (a: Au10tixBaseUI.DynamicUIImageInfo.ThemeImageData, b: Au10tixBaseUI.DynamicUIImageInfo.ThemeImageData) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ImageDataContainer : Swift.Codable, Swift.Equatable {
    public static func == (a: Au10tixBaseUI.DynamicUIImageInfo.ImageDataContainer, b: Au10tixBaseUI.DynamicUIImageInfo.ImageDataContainer) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct ThemeImagePath : Swift.Codable, Swift.Equatable {
    public static func == (a: Au10tixBaseUI.DynamicUIImageInfo.ThemeImagePath, b: Au10tixBaseUI.DynamicUIImageInfo.ThemeImagePath) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Au10tixBaseUI.DynamicUIImageInfo : Swift.Equatable {
  public static func == (lhs: Au10tixBaseUI.DynamicUIImageInfo, rhs: Au10tixBaseUI.DynamicUIImageInfo) -> Swift.Bool
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public var isDarkMode: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) public func connect(to view: UIKit.UIView? = nil, with constraints: [Au10tixBaseUI.UIConnection], update: Swift.Bool = false)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public func roundCorners(radius: CoreFoundation.CGFloat, corners: UIKit.UIRectCorner = .allCorners)
  @_Concurrency.MainActor(unsafe) public func putStroke(width: CoreFoundation.CGFloat, color: UIKit.UIColor = .clear)
  @_Concurrency.MainActor(unsafe) public func addGradient(_ gradient: Au10tixBaseUI.Gradient, mask: QuartzCore.CAShapeLayer? = nil)
  @_Concurrency.MainActor(unsafe) public func removeGradientLayer()
  @_Concurrency.MainActor(unsafe) public func addShape(color: UIKit.UIColor, mask: QuartzCore.CAShapeLayer)
  @_Concurrency.MainActor(unsafe) public func addSubviewIfNeeded(_ subview: UIKit.UIView?)
  @_Concurrency.MainActor(unsafe) public func removeSubviewsExcept(views: [UIKit.UIView])
}
public struct UITheme {
  public static var shared: Au10tixBaseUI.UITheme
}
extension Au10tixBaseUI.UITheme {
  public static var successColorHex: Au10tixBaseUI.ThemeColorHex {
    get
  }
  public static var errorColorHex: Au10tixBaseUI.ThemeColorHex {
    get
  }
  public static var infoColorHex: Au10tixBaseUI.ThemeColorHex {
    get
  }
  public static var backgroundColorHex: Au10tixBaseUI.ThemeColorHex {
    get
  }
  public static var primaryColorHex: Au10tixBaseUI.ThemeColorHex {
    get
  }
  public static var titleColorHex: Au10tixBaseUI.ThemeColorHex {
    get
  }
  public static var buttonTextColorHex: Au10tixBaseUI.ThemeColorHex {
    get
  }
}
extension UIKit.UIColor {
  public static var successColor: UIKit.UIColor {
    get
  }
  public static var errorColor: UIKit.UIColor {
    get
  }
  public static var infoColor: UIKit.UIColor {
    get
  }
  public static var backgroundColor: UIKit.UIColor {
    get
  }
  public static var primaryColor: UIKit.UIColor {
    get
  }
  public static var titleColor: UIKit.UIColor {
    get
  }
  public static var buttonTextColor: UIKit.UIColor {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class DescriptionPreviewView : Au10tixBaseUI.BaseUIView {
  @_Concurrency.MainActor(unsafe) final public var text: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override final public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc(Au10xUIComponentConfigs) final public class UIComponentConfigs : ObjectiveC.NSObject {
  final public let showCloseButton: Swift.Bool
  final public let showPrimaryButton: Swift.Bool
  final public let canUploadImage: Swift.Bool
  final public let shouldDisplayIntro: Swift.Bool
  final public let flowConfig: [Swift.String : Any]?
  @objc public init(showCloseButton: Swift.Bool = true, showPrimaryButton: Swift.Bool = true, canUploadImage: Swift.Bool = true, shouldDisplayIntro: Swift.Bool = true, flowConfig: [Swift.String : Any]? = nil)
  @objc deinit
}
public struct Gradient {
  public let colors: [UIKit.UIColor]
  public init(colors: [UIKit.UIColor], startPoint: CoreFoundation.CGPoint = CGPoint.topCenter, endPoint: CoreFoundation.CGPoint = CGPoint.bottomCenter)
}
public class DynamicUIFont : Au10tixBaseUI.DynamicAsset {
  public init(size: CoreFoundation.CGFloat = 20, weight: Au10tixBaseUI.DynamicUIFontInfo.Weight = .regular, name: Swift.String? = nil, source: Au10tixBaseUI.DynamicAsset.Source? = nil)
  @objc deinit
}
public enum DynamicAssetDestination : Swift.String, Swift.Codable, Swift.CaseIterable {
  case baseUI
  case sdcUI
  case poaUI
  case pflUI
  case helmetUI
  case nfcUI
  case vcUI
  case vsUI
  case pcUI
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Au10tixBaseUI.DynamicAssetDestination]
  public typealias RawValue = Swift.String
  public static var allCases: [Au10tixBaseUI.DynamicAssetDestination] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class VideoPreviewView : Au10tixBaseUI.BaseUIView {
  @_Concurrency.MainActor(unsafe) public init(estimatedWidth: CoreFoundation.CGFloat, estimatedHeight: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) final public func clear()
  @objc deinit
}
public struct ActionItem {
  public enum Action : Swift.Equatable {
    case none
    case empty
    case captureDisabled
    case captureEnabled
    case approval
    case smallApproval
    case refresh
    case largeRefresh
    case openGallery
    case time
    case custom(_: Au10tixBaseUI.DynamicUIImage?)
    case animation(_: Au10tixBaseUI.ActionItem.Animation?)
    public var isPrimaryButton: Swift.Bool {
      get
    }
    public static func == (a: Au10tixBaseUI.ActionItem.Action, b: Au10tixBaseUI.ActionItem.Action) -> Swift.Bool
  }
  public enum ButtonType {
    case rounded
    case underlined
    case circled
    case placeholder
    case checkbox
    public static func == (a: Au10tixBaseUI.ActionItem.ButtonType, b: Au10tixBaseUI.ActionItem.ButtonType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(type: Au10tixBaseUI.ActionItem.ButtonType, height: CoreFoundation.CGFloat? = nil, width: CoreFoundation.CGFloat? = nil, centered: Swift.Bool? = nil, title: Swift.String? = nil, cornerRadius: Swift.Int = 0, backgroundColor: UIKit.UIColor? = nil, strokeColor: UIKit.UIColor? = nil, strokeWidth: CoreFoundation.CGFloat? = nil, shadowColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, action: Au10tixBaseUI.ActionItem.Action? = nil, isEnabled: Swift.Bool = true)
  public enum Animation : Swift.Equatable {
    public static func == (lhs: Au10tixBaseUI.ActionItem.Animation, rhs: Au10tixBaseUI.ActionItem.Animation) -> Swift.Bool
    case imageSequence(images: [Au10tixBaseUI.DynamicUIImage], timeInterval: Foundation.TimeInterval, completion: (() -> ())?)
    case textSequence(strings: [Foundation.NSAttributedString], timeInterval: Foundation.TimeInterval, completion: (() -> ())?)
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DynamicFontManager : Au10tixBaseUI.DynamicAssetManager<Au10tixBaseUI.DynamicUIFont, Au10tixBaseUI.DynamicUIFontInfo> {
  public static var shared: Au10tixBaseUI.DynamicFontManager
  @objc public static var sharedObject: ObjectiveC.NSObject {
    @objc get
  }
  @objc final public func updatePersistentData(completion: @escaping () -> Swift.Void)
  final public func clearCache()
  @objc deinit
}
public protocol CameraIssueViewControllerDelegate : AnyObject {
  func photoPermissionGranted(_ status: Au10tixBaseUI.PermissionStatus)
  func didCloseScreen()
}
extension Au10tixBaseUI.CameraIssueViewControllerDelegate {
  public func photoPermissionGranted(_ status: Au10tixBaseUI.PermissionStatus)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class CameraIssueViewController : Au10tixBaseUI.BaseUIViewController {
  @_Concurrency.MainActor(unsafe) override public var screenTitle: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) override public var previewViewDatasource: [Au10tixBaseUI.PreviewPage]? {
    get
  }
  @_Concurrency.MainActor(unsafe) override public var actionSectionType: Au10tixBaseUI.ActionSectionType {
    get
  }
  @_Concurrency.MainActor(unsafe) override public var actionViewSection: [Au10tixBaseUI.ActionSection] {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var delegate: Au10tixBaseUI.CameraIssueViewControllerDelegate?
  @_Concurrency.MainActor(unsafe) public var headTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public var screenDescription: Swift.String?
  @_Concurrency.MainActor(unsafe) public var firstButtonTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public var secondButtonTitle: Swift.String?
  @_Concurrency.MainActor(unsafe) public var imageType: Au10tixBaseUI.CameraIssueViewController.ImageType
  @_Concurrency.MainActor(unsafe) public var firstButtonType: Au10tixBaseUI.CameraIssueViewController.ActionType
  @_Concurrency.MainActor(unsafe) public var secondButtonType: Au10tixBaseUI.CameraIssueViewController.ActionType
  @_Concurrency.MainActor(unsafe) override public func firstButtonHandler()
  @_Concurrency.MainActor(unsafe) override public func secondButtonHandler()
  @_Concurrency.MainActor(unsafe) override public func closeSreenHandler()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Au10tixBaseUI.CameraIssueViewController {
  public enum ActionType {
    case openSettings
    case uploadFile
    case close
    public static func == (a: Au10tixBaseUI.CameraIssueViewController.ActionType, b: Au10tixBaseUI.CameraIssueViewController.ActionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ImageType {
    case cameraPermissionDenied
    case cameraUnavailable
    case custom(_: Au10tixBaseUI.DynamicUIImage?)
  }
}
@_hasMissingDesignatedInitializers public class DynamicAssetManager<T, S> : ObjectiveC.NSObject where T : Au10tixBaseUI.DynamicAsset, S : Au10tixBaseUI.DynamicAssetInfo {
  @objc deinit
}
public struct ThemeColorHex : Swift.Codable, Swift.Equatable {
  public let light: Swift.String?
  public let dark: Swift.String?
  public init(light: Swift.String, dark: Swift.String?)
  public static func == (a: Au10tixBaseUI.ThemeColorHex, b: Au10tixBaseUI.ThemeColorHex) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class DynamicUIImage : Au10tixBaseUI.DynamicAsset {
  final public let images: [UIKit.UIImage]?
  final public let animativeUIImageInfo: Au10tixBaseUI.DynamicAnimativeUIImageInfo?
  public var tintColor: Au10tixBaseUI.ThemeColorHex?
  public var maxImageHeight: CoreFoundation.CGFloat {
    get
  }
  public init(name: Swift.String, source: Au10tixBaseUI.DynamicAsset.Source? = nil, animativeUIImageInfo: Au10tixBaseUI.DynamicAnimativeUIImageInfo? = nil, tintColor: Au10tixBaseUI.ThemeColorHex? = nil, maxHeight: CoreFoundation.CGFloat? = nil)
  public init(memoryImage: UIKit.UIImage?, tintColor: Au10tixBaseUI.ThemeColorHex? = nil)
  @objc deinit
}
public struct UIConnection {
  public enum Iteration : Swift.String {
    case equal
    case greaterOrEqual
    case lessOrEqual
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ConnectionType : Swift.String {
    case leading
    case trailing
    case left
    case right
    case top
    case bottom
    case width
    case height
    case centerX
    case centerY
    case firstBaseline
    case lastBaseline
    case widthRatio
    case heightRatio
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(type: Au10tixBaseUI.UIConnection.ConnectionType, margin: CoreFoundation.CGFloat = 0, iteration: Au10tixBaseUI.UIConnection.Iteration = .equal, fromSafeArea: Swift.Bool = false, toSafeArea: Swift.Bool = false)
  public func constraint(from firstView: UIKit.UIView, to secondView: UIKit.UIView? = nil) -> UIKit.NSLayoutConstraint?
}
extension Swift.String {
  public var asImage: UIKit.UIImage? {
    get
  }
  public func asImage(with bundle: Foundation.Bundle) -> UIKit.UIImage?
  public func animativeImages(in bundle: Foundation.Bundle) -> [UIKit.UIImage]
}
extension Au10tixBaseUI.DynamicUIImage {
  public static var empty: Au10tixBaseUI.DynamicUIImage {
    get
  }
  public var uiImage: UIKit.UIImage? {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class BaseUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CoreFoundation.CGPoint {
  public static let topLeft: CoreFoundation.CGPoint
  public static let topCenter: CoreFoundation.CGPoint
  public static let topRight: CoreFoundation.CGPoint
  public static let centerLeft: CoreFoundation.CGPoint
  public static let center: CoreFoundation.CGPoint
  public static let centerRight: CoreFoundation.CGPoint
  public static let bottomLeft: CoreFoundation.CGPoint
  public static let bottomCenter: CoreFoundation.CGPoint
  public static let bottomRight: CoreFoundation.CGPoint
}
public struct AlertAction {
  public enum Style {
    case regular
    case cancel
    public static func == (a: Au10tixBaseUI.AlertAction.Style, b: Au10tixBaseUI.AlertAction.Style) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var handler: (() -> ())?
  public init(title: Swift.String? = nil, style: Au10tixBaseUI.AlertAction.Style = .regular, strokeColor: UIKit.UIColor? = nil, textColor: UIKit.UIColor? = nil, background: UIKit.UIColor? = nil)
  public var systemAlertAction: UIKit.UIAlertAction {
    get
  }
}
@objc public protocol UIComponentViewControllerNavigationDelegate {
  @objc func uiComponentViewControllerDidFinish(_ controller: Au10tixBaseUI.UIComponentBaseViewController)
  @objc func uiComponentViewControllerDidPressClose(_ controller: Au10tixBaseUI.UIComponentBaseViewController)
}
@objc @_Concurrency.MainActor(unsafe) open class UIComponentBaseViewController : UIKit.UIViewController, Au10tixCore.Au10tixSDK {
  @_Concurrency.MainActor(unsafe) final public let configs: Au10tixBaseUI.UIComponentConfigs
  @_Concurrency.MainActor(unsafe) weak public var navigationDelegate: Au10tixBaseUI.UIComponentViewControllerNavigationDelegate?
  @_Concurrency.MainActor(unsafe) open func close()
  @objc @_Concurrency.MainActor(unsafe) required public init(configs: Au10tixBaseUI.UIComponentConfigs = UIComponentConfigs(), navigationDelegate: Au10tixBaseUI.UIComponentViewControllerNavigationDelegate? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension Swift.Optional where Wrapped == UIKit.UIImage {
  public var asDynamicUIImage: Au10tixBaseUI.DynamicUIImage? {
    get
  }
}
public struct DynamicAnimativeUIImageInfo : Swift.Codable, Swift.Equatable {
  public init(duration: Foundation.TimeInterval = 0.2, repeatCount: Swift.Int = 0)
  public static func == (a: Au10tixBaseUI.DynamicAnimativeUIImageInfo, b: Au10tixBaseUI.DynamicAnimativeUIImageInfo) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseUIViewController : Au10tixBaseUI.BaseViewController {
  public enum UIElement {
    case top
    case preview
    case action
    case bottom
    case all
    public static func == (a: Au10tixBaseUI.BaseUIViewController.UIElement, b: Au10tixBaseUI.BaseUIViewController.UIElement) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) open var uiLicenseKey: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) open var topLogoImageAsset: Au10tixBaseUI.DynamicUIImage? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var leftTopLogoImageAsset: Au10tixBaseUI.DynamicUIImage? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var screenTitle: Swift.String {
    get
  }
  @_Concurrency.MainActor(unsafe) open var showCloseButton: Swift.Bool {
    get
  }
  @_Concurrency.MainActor(unsafe) open var previewViewDatasource: [Au10tixBaseUI.PreviewPage]? {
    get
  }
  @_Concurrency.MainActor(unsafe) weak open var customPreviewView: Au10tixBaseUI.BaseUIView? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var actionViewSection: [Au10tixBaseUI.ActionSection] {
    get
  }
  @_Concurrency.MainActor(unsafe) open var bottomLogoImageAsset: Au10tixBaseUI.DynamicUIImage? {
    get
  }
  @_Concurrency.MainActor(unsafe) open var actionSectionType: Au10tixBaseUI.ActionSectionType {
    get
  }
  @_Concurrency.MainActor(unsafe) open var estimatedPreviewViewHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) open var estimatedPreviewViewWidth: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) open var previewViewFrame: CoreFoundation.CGRect? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) public func updateUI(_ elements: [Au10tixBaseUI.BaseUIViewController.UIElement] = [.all])
  @_Concurrency.MainActor(unsafe) public func presentNextPage()
  @_Concurrency.MainActor(unsafe) public func startScannerAnimation(color: UIKit.UIColor? = nil, boundariesFrame: CoreFoundation.CGRect, duration: Foundation.TimeInterval)
  @_Concurrency.MainActor(unsafe) public func stopScannerAnimation()
  @_Concurrency.MainActor(unsafe) open func closeSreenHandler()
  @_Concurrency.MainActor(unsafe) open func firstButtonHandler()
  @_Concurrency.MainActor(unsafe) open func secondButtonHandler()
  @_Concurrency.MainActor(unsafe) open func thirdButtonHandler()
  @_Concurrency.MainActor(unsafe) open func leftTopButtonHandler()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct ProgressBarDatasource {
  public init(infinite: Swift.Bool, progress: Swift.Float? = nil, progressColor: UIKit.UIColor? = nil, trackColor: UIKit.UIColor? = nil, strokeWidth: CoreFoundation.CGFloat? = nil, strokeColor: UIKit.UIColor? = nil)
}
public enum PermissionStatus {
  case authorized
  case denied
  case restricted
  case limited
  case notDetermined
  case other
  public var isAuthorized: Swift.Bool {
    get
  }
  public static func == (a: Au10tixBaseUI.PermissionStatus, b: Au10tixBaseUI.PermissionStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PermissionManager {
  typealias Handler = ((Au10tixBaseUI.PermissionStatus) -> ())
  func requestPermission(_ completion: @escaping Self.Handler)
  func openSettings()
}
extension Au10tixBaseUI.PermissionManager {
  public func openSettings()
}
public struct ColorGenerator {
  public static var whiteFFFFFF: UIKit.UIColor {
    get
  }
  public static var blue181244: UIKit.UIColor {
    get
  }
  public static var blue181244_whiteFFFFFF: UIKit.UIColor {
    get
  }
  public static var blue1F1756_WhiteFFFFFF: UIKit.UIColor {
    get
  }
  public static var blue3B5CCE_whiteFFFFFF: UIKit.UIColor {
    get
  }
  public static var whiteFFFFFF_blue181244: UIKit.UIColor {
    get
  }
  public static var black1B1C1D_WhiteFFFFFF: UIKit.UIColor {
    get
  }
  public static var whiteFFFFFF_black000000: UIKit.UIColor {
    get
  }
  public static var whiteFFFFFF_blue101F39: UIKit.UIColor {
    get
  }
  public static var whiteFFFFFF_blue0C1143: UIKit.UIColor {
    get
  }
  public static var whiteFFFFFF_blue000120: UIKit.UIColor {
    get
  }
  public static var gray6C6C6C_whiteFFFFFF: UIKit.UIColor {
    get
  }
  public static var grayACB5BD: UIKit.UIColor {
    get
  }
  public static var grayD2CBB6: UIKit.UIColor {
    get
  }
  public static var orangeF2C94C: UIKit.UIColor {
    get
  }
  public static var orangeFFA53A: UIKit.UIColor {
    get
  }
  public static var orangeF2C94C_whiteFFFFFF: UIKit.UIColor {
    get
  }
  public static var green42CF8B: UIKit.UIColor {
    get
  }
  public static var greenA9FF80: UIKit.UIColor {
    get
  }
  public static var green36A771: UIKit.UIColor {
    get
  }
  public static var whiteFFFFFF_gray9D9D9D: UIKit.UIColor {
    get
  }
  public static var gray6C6C6C_gray9D9D9D: UIKit.UIColor {
    get
  }
  public static var gray313C4F: UIKit.UIColor {
    get
  }
  public static var grayF8F8FB_blue181244: UIKit.UIColor {
    get
  }
  public static var grayDDE2E5_blue4F4A74: UIKit.UIColor {
    get
  }
  public static var blue181244_grayF8F8FB: UIKit.UIColor {
    get
  }
  public static var black1B1C1D: UIKit.UIColor {
    get
  }
  public static var grayF8F8FB: UIKit.UIColor {
    get
  }
  public static var redF95D5C: UIKit.UIColor {
    get
  }
  public static var blue000120: UIKit.UIColor {
    get
  }
  public static var grayEFEFF2_blue302A5A: UIKit.UIColor {
    get
  }
  public static var redF95D5C_whiteFFFFFF: UIKit.UIColor {
    get
  }
  public static var black1B1C1D_grayD4DAE4: UIKit.UIColor {
    get
  }
  public static var grayACB5BD_blue181244: UIKit.UIColor {
    get
  }
  public static var grayEFF0F2_blue4F4A74: UIKit.UIColor {
    get
  }
}
public struct BulletItem {
  public init(icon: Au10tixBaseUI.Alert.Icon?, title: Swift.String?)
}
public struct BulletBody {
  public init(title: Au10tixBaseUI.BulletItem?, messages: [Au10tixBaseUI.BulletItem]?)
}
extension Au10tixBaseUI.DynamicUIFont {
  public var asUIFont: UIKit.UIFont {
    get
  }
}
public class VideoPermissionManager : Au10tixBaseUI.PermissionManager {
  public init()
  public func requestPermission(_ completion: @escaping (Au10tixBaseUI.PermissionStatus) -> ())
  @objc deinit
}
public protocol DynamicAssetInfo : Swift.Decodable, Swift.Encodable, Swift.Equatable {
  associatedtype T : Swift.Decodable, Swift.Encodable
  associatedtype D : Swift.Decodable, Swift.Encodable
  var key: Swift.String? { get }
  var lastUpdate: Swift.String? { get }
  var dataPaths: [Self.T]? { get }
  var dataArray: [Self.D]? { get set }
  var destinations: [Au10tixBaseUI.DynamicAssetDestination]? { get }
}
public class DynamicAsset : Swift.Equatable {
  public init(name: Swift.String, source: Au10tixBaseUI.DynamicAsset.Source)
  public enum Source : Swift.Equatable {
    case bundle(_: Foundation.Bundle)
    case memory
    case server
    public static func == (lhs: Au10tixBaseUI.DynamicAsset.Source, rhs: Au10tixBaseUI.DynamicAsset.Source) -> Swift.Bool
  }
  public static func == (lhs: Au10tixBaseUI.DynamicAsset, rhs: Au10tixBaseUI.DynamicAsset) -> Swift.Bool
  @objc deinit
}
public struct AlertManager {
  public static var shared: Au10tixBaseUI.AlertManager
  public func present(_ alert: Au10tixBaseUI.Alert, on controller: UIKit.UIViewController? = nil)
  public func dismiss()
}
public enum PreviewItemType {
  case imageNumberText
  case animativeImage
  case description
  case cameraView
  case space
  case video
  public static func == (a: Au10tixBaseUI.PreviewItemType, b: Au10tixBaseUI.PreviewItemType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PreviewItemMargin : Swift.Equatable {
  case top(space: CoreFoundation.CGFloat)
  case bottom(space: CoreFoundation.CGFloat)
  public static func == (a: Au10tixBaseUI.PreviewItemMargin, b: Au10tixBaseUI.PreviewItemMargin) -> Swift.Bool
}
public protocol PreviewItem {
  var type: Au10tixBaseUI.PreviewItemType { get set }
  var margins: [Au10tixBaseUI.PreviewItemMargin] { get set }
  var view: UIKit.UIView { get }
}
public struct ImageNumberTextPreviewItem : Au10tixBaseUI.PreviewItem {
  public var type: Au10tixBaseUI.PreviewItemType
  public var margins: [Au10tixBaseUI.PreviewItemMargin]
  public var view: UIKit.UIView {
    get
  }
  public init(margins: [Au10tixBaseUI.PreviewItemMargin] = [], assets: [Au10tixBaseUI.DynamicUIImage]? = nil, text: Swift.String? = nil)
}
public struct AnimativeImagePreviewItem : Au10tixBaseUI.PreviewItem {
  public var type: Au10tixBaseUI.PreviewItemType
  public var margins: [Au10tixBaseUI.PreviewItemMargin]
  public var view: UIKit.UIView {
    get
  }
  public init(margins: [Au10tixBaseUI.PreviewItemMargin] = [], animativeAsset: Au10tixBaseUI.DynamicUIImage? = nil)
}
public struct DescriptionPreviewItem : Au10tixBaseUI.PreviewItem {
  public var type: Au10tixBaseUI.PreviewItemType
  public var margins: [Au10tixBaseUI.PreviewItemMargin]
  public var view: UIKit.UIView {
    get
  }
  public init(margins: [Au10tixBaseUI.PreviewItemMargin] = [], text: Swift.String? = nil, textColor: UIKit.UIColor? = nil)
}
public struct VideoPreviewItem : Au10tixBaseUI.PreviewItem {
  public typealias CapturedVideo = (Foundation.URL, Swift.Bool, (() -> ()))
  public var type: Au10tixBaseUI.PreviewItemType
  public var margins: [Au10tixBaseUI.PreviewItemMargin]
  public var view: UIKit.UIView {
    get
  }
  public init(videoPreviewView: Au10tixBaseUI.VideoPreviewView, margins: [Au10tixBaseUI.PreviewItemMargin] = [], middleToastDatasource: Au10tixBaseUI.ToastViewDatasource? = nil, bottomToastDatasource: Au10tixBaseUI.ToastViewDatasource? = nil, videoUrl: Foundation.URL, isPlay: Swift.Bool, onPlayingComlete: (() -> ())?)
}
public struct CameraPreviewItem : Au10tixBaseUI.PreviewItem {
  public var type: Au10tixBaseUI.PreviewItemType
  public var margins: [Au10tixBaseUI.PreviewItemMargin]
  public var view: UIKit.UIView {
    get
  }
  public init(cameraPreviewView: Au10tixBaseUI.CameraPreviewView, margins: [Au10tixBaseUI.PreviewItemMargin] = [], state: Au10tixBaseUI.CameraPreviewViewState, showIssuesBar: Swift.Bool = false, captureViewTintColor: UIKit.UIColor? = nil, progressBarInfo: Au10tixBaseUI.ProgressBarDatasource? = nil, middleToastDatasource: Au10tixBaseUI.ToastViewDatasource? = nil, bottomToastDatasource: Au10tixBaseUI.ToastViewDatasource? = nil, recordingTime: Foundation.Date? = nil, recordingIndicatorEnabled: Swift.Bool = false, capturedImageAsset: Au10tixBaseUI.DynamicUIImage? = nil, successImageAsset: Au10tixBaseUI.DynamicUIImage? = nil, placeholderImageAppearance: Au10tixBaseUI.CameraPreviewPlaceholderAppearance = .visible, blurViewBackgroundColor: UIKit.UIColor = .black.withAlphaComponent(0.33), tutorialText: Swift.String? = nil, tutorialImageAsset: Au10tixBaseUI.DynamicUIImage? = nil, issuesBarClicked: (() -> ())? = nil)
}
public enum ActionSectionType {
  case none
  case rounded
  case roundedAndUnderlined
  case circled
  case checkboxAndRounded
  public static func == (a: Au10tixBaseUI.ActionSectionType, b: Au10tixBaseUI.ActionSectionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct ActionSection {
  public init(actionViewAlignment: UIKit.NSLayoutConstraint.Axis, spacing: CoreFoundation.CGFloat? = nil, actionViewFirstItem: Au10tixBaseUI.ActionItem? = nil, actionViewSecondItem: Au10tixBaseUI.ActionItem? = nil, actionViewThirdItem: Au10tixBaseUI.ActionItem? = nil, backgroundImageAsset: Au10tixBaseUI.DynamicUIImage? = nil)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class BaseViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum CameraPreviewViewState : Swift.Equatable {
  case none
  case capturing
  case takingManualImage
  case imageCaptured(_: UIKit.UIImage)
  case badExternalImage(_: Au10tixCore.Au10Image, _: Swift.Bool)
  case badImage
  case timeout
  case processing
  public static func == (a: Au10tixBaseUI.CameraPreviewViewState, b: Au10tixBaseUI.CameraPreviewViewState) -> Swift.Bool
}
public enum CameraPreviewPlaceholderAppearance {
  case visible
  case vague
  case gone
  public static func == (a: Au10tixBaseUI.CameraPreviewPlaceholderAppearance, b: Au10tixBaseUI.CameraPreviewPlaceholderAppearance) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class CameraPreviewView : Au10tixBaseUI.BaseUIView {
  @_Concurrency.MainActor(unsafe) final public var boundariesFrame: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var placeholderPosition: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor(unsafe) final public var placeholderImageAppearance: Au10tixBaseUI.CameraPreviewPlaceholderAppearance {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var blurViewBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public init(estimatedWidth: CoreFoundation.CGFloat, estimatedHeight: CoreFoundation.CGFloat, camera: UIKit.UIView?, boundariesImageAsset: Au10tixBaseUI.DynamicUIImage? = nil, placeHolderImageAsset: Au10tixBaseUI.DynamicUIImage? = nil, successImageAsset: Au10tixBaseUI.DynamicUIImage? = nil, cornerRadius: CoreFoundation.CGFloat? = nil, placeholderInsetsRatio: UIKit.UIEdgeInsets? = nil, boundariesInsetsRatio: UIKit.UIEdgeInsets? = nil, issuesBarText: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc override final public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
public class AudioPermissionManager : Au10tixBaseUI.PermissionManager {
  public init()
  public func requestPermission(_ completion: @escaping (Au10tixBaseUI.PermissionStatus) -> ())
  @objc deinit
}
public struct DynamicUIFontInfo : Au10tixBaseUI.DynamicAssetInfo {
  public typealias T = Au10tixBaseUI.DynamicUIFontInfo.Style
  public typealias D = Au10tixBaseUI.DynamicUIFontInfo.StyleData
  public var key: Swift.String?
  public var lastUpdate: Swift.String?
  public var dataPaths: [Au10tixBaseUI.DynamicUIFontInfo.Style]?
  public var dataArray: [Au10tixBaseUI.DynamicUIFontInfo.StyleData]?
  public var destinations: [Au10tixBaseUI.DynamicAssetDestination]?
  public struct Style : Swift.Codable, Swift.Equatable {
    public static func == (a: Au10tixBaseUI.DynamicUIFontInfo.Style, b: Au10tixBaseUI.DynamicUIFontInfo.Style) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct StyleData : Swift.Codable, Swift.Equatable {
    public static func == (a: Au10tixBaseUI.DynamicUIFontInfo.StyleData, b: Au10tixBaseUI.DynamicUIFontInfo.StyleData) -> Swift.Bool
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public enum Weight : Swift.String, Swift.Codable {
    case regular
    case medium
    case semiBold
    case bold
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Au10tixBaseUI.DynamicUIFontInfo : Swift.Equatable {
  public static func == (lhs: Au10tixBaseUI.DynamicUIFontInfo, rhs: Au10tixBaseUI.DynamicUIFontInfo) -> Swift.Bool
}
extension Au10tixBaseUI.DynamicUIImageView.PlaceHolder : Swift.Equatable {}
extension Au10tixBaseUI.DynamicUIImageView.PlaceHolder : Swift.Hashable {}
extension Au10tixBaseUI.DynamicUIImageView.PlaceHolder : Swift.RawRepresentable {}
extension Au10tixBaseUI.ImagePicker.LibraryImageError : Swift.Equatable {}
extension Au10tixBaseUI.ImagePicker.LibraryImageError : Swift.Hashable {}
extension Au10tixBaseUI.Alert.Style : Swift.Equatable {}
extension Au10tixBaseUI.Alert.Style : Swift.Hashable {}
extension Au10tixBaseUI.DynamicAssetDestination : Swift.Equatable {}
extension Au10tixBaseUI.DynamicAssetDestination : Swift.Hashable {}
extension Au10tixBaseUI.DynamicAssetDestination : Swift.RawRepresentable {}
extension Au10tixBaseUI.ActionItem.ButtonType : Swift.Equatable {}
extension Au10tixBaseUI.ActionItem.ButtonType : Swift.Hashable {}
extension Au10tixBaseUI.CameraIssueViewController.ActionType : Swift.Equatable {}
extension Au10tixBaseUI.CameraIssueViewController.ActionType : Swift.Hashable {}
extension Au10tixBaseUI.UIConnection.Iteration : Swift.Equatable {}
extension Au10tixBaseUI.UIConnection.Iteration : Swift.Hashable {}
extension Au10tixBaseUI.UIConnection.Iteration : Swift.RawRepresentable {}
extension Au10tixBaseUI.UIConnection.ConnectionType : Swift.Equatable {}
extension Au10tixBaseUI.UIConnection.ConnectionType : Swift.Hashable {}
extension Au10tixBaseUI.UIConnection.ConnectionType : Swift.RawRepresentable {}
extension Au10tixBaseUI.AlertAction.Style : Swift.Equatable {}
extension Au10tixBaseUI.AlertAction.Style : Swift.Hashable {}
extension Au10tixBaseUI.BaseUIViewController.UIElement : Swift.Equatable {}
extension Au10tixBaseUI.BaseUIViewController.UIElement : Swift.Hashable {}
extension Au10tixBaseUI.PermissionStatus : Swift.Equatable {}
extension Au10tixBaseUI.PermissionStatus : Swift.Hashable {}
extension Au10tixBaseUI.DynamicUIFontInfo.Weight : Swift.Equatable {}
extension Au10tixBaseUI.DynamicUIFontInfo.Weight : Swift.Hashable {}
extension Au10tixBaseUI.DynamicUIFontInfo.Weight : Swift.RawRepresentable {}
extension Au10tixBaseUI.PreviewItemType : Swift.Equatable {}
extension Au10tixBaseUI.PreviewItemType : Swift.Hashable {}
extension Au10tixBaseUI.ActionSectionType : Swift.Equatable {}
extension Au10tixBaseUI.ActionSectionType : Swift.Hashable {}
extension Au10tixBaseUI.CameraPreviewPlaceholderAppearance : Swift.Equatable {}
extension Au10tixBaseUI.CameraPreviewPlaceholderAppearance : Swift.Hashable {}
