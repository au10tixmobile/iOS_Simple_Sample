// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixVoiceConsentUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Au10tixBaseUI
import Au10tixCore
import Au10tixSourceManager
@_exported import Au10tixVoiceConsentUI
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class VCSession : Au10tixCore.Au10tixSession, Au10tixCore.CameraSession {
  public var isAvailable: Swift.Bool {
    get
  }
  public var isCameraActive: Swift.Bool {
    get
  }
  public var uiLicenseKey: Swift.String {
    get
    set
  }
  public var isVideoSession: Swift.Bool
  public var authenticator: Au10tixCore.Au10tixSessionAuthenticator
  weak public var delegate: Au10tixVoiceConsentUI.VCSessionDelegate?
  public func start(previewView: UIKit.UIView, refresh: Swift.Bool = true, didStartHandler: @escaping (Swift.Result<Swift.Bool, Au10tixCore.Au10tixCorePrepareError>) -> Swift.Void)
  public func stop()
  public func recordVideo()
  public func stopVideoRecording()
  public func approveVideo(completion: @escaping (() -> ()))
  public func pauseCamera()
  public func resumeCamera(_ refresh: Swift.Bool = true)
  public func cameraDidSuspend()
  public func cameraDidResume()
  public func clearCache()
  @objc deinit
}
extension Au10tixVoiceConsentUI.VCSession : Au10tixCore.TimeoutableSessionDelegate {
  public func sessionTimedout(_ timeoutable: Au10tixCore.Timeoutable)
}
@_inheritsConvenienceInitializers @objc(Au10xVSViewController) @_Concurrency.MainActor(unsafe) @_objcRuntimeName(Au10xVSViewController) final public class VSViewController : Au10tixBaseUI.UIComponentBaseViewController {
  @_Concurrency.MainActor(unsafe) weak final public var vcDelegate: Au10tixVoiceConsentUI.VCSessionDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var consentText: Swift.String?
  @_Concurrency.MainActor(unsafe) final public var vcSessionTime: Foundation.TimeInterval? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var idSessionTime: Foundation.TimeInterval? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc required public init(configs: Au10tixBaseUI.UIComponentConfigs = super, navigationDelegate: Au10tixBaseUI.UIComponentViewControllerNavigationDelegate? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct VCLogManager {
  public static var shared: Au10tixVoiceConsentUI.VCLogManager
  public enum Category : Swift.String {
    case error
    case introPage
    case capture
    case captureReview
    public var rawValue: Swift.String {
      get
    }
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
  }
}
extension Au10tixCore.SDKLogEvent {
  convenience public init(category: Au10tixVoiceConsentUI.VCLogManager.Category, action: Au10tixCore.Log.Action, isUi: Swift.Bool = false)
}
@_inheritsConvenienceInitializers @objc(Au10xVCViewController) @_Concurrency.MainActor(unsafe) @_objcRuntimeName(Au10xVCViewController) final public class VCViewController : Au10tixBaseUI.UIComponentBaseViewController {
  @_Concurrency.MainActor(unsafe) weak final public var vcDelegate: Au10tixVoiceConsentUI.VCSessionDelegate? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var consentText: Swift.String?
  @_Concurrency.MainActor(unsafe) final public var vcSessionTime: Foundation.TimeInterval? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc required public init(configs: Au10tixBaseUI.UIComponentConfigs = super, navigationDelegate: Au10tixBaseUI.UIComponentViewControllerNavigationDelegate? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum VCSessionError : Swift.Error {
  case timedout
  case sessionTokenExpired
  case captureVideo
  public static func == (a: Au10tixVoiceConsentUI.VCSessionError, b: Au10tixVoiceConsentUI.VCSessionError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol VCSessionDelegate : AnyObject {
  func vcSession(_ vcSession: Au10tixVoiceConsentUI.VCSession, didFailWith error: Au10tixVoiceConsentUI.VCSessionError)
  func vcSession(_ vcSession: Au10tixVoiceConsentUI.VCSession, didCapture videoUrl: Foundation.URL)
  func cameraDidSuspend(_ vcSession: Au10tixVoiceConsentUI.VCSession)
  func cameraDidResume(_ vcSession: Au10tixVoiceConsentUI.VCSession)
}
extension Au10tixVoiceConsentUI.VCSessionDelegate {
  public func cameraDidSuspend(_ vcSession: Au10tixVoiceConsentUI.VCSession)
  public func cameraDidResume(_ vcSession: Au10tixVoiceConsentUI.VCSession)
}
public enum Route {
  case none
  case vcFlowIntro
  case vcCapture
  case vsFlowIntro
  case vsCapture
  case cameraIssue(delegate: Au10tixBaseUI.CameraIssueViewControllerDelegate?, title: Swift.String?, imageType: Au10tixBaseUI.CameraIssueViewController.ImageType, description: Swift.String?, firstButtonTitle: Swift.String?, secondButtonTitle: Swift.String?, firstActionType: Au10tixBaseUI.CameraIssueViewController.ActionType)
}
extension Au10tixVoiceConsentUI.VCLogManager.Category : Swift.Equatable {}
extension Au10tixVoiceConsentUI.VCLogManager.Category : Swift.Hashable {}
extension Au10tixVoiceConsentUI.VCLogManager.Category : Swift.RawRepresentable {}
extension Au10tixVoiceConsentUI.VCSessionError : Swift.Equatable {}
extension Au10tixVoiceConsentUI.VCSessionError : Swift.Hashable {}
