// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
@_exported import Au10tixCore
import CoreGraphics
import CoreImage
import CoreLocation
import Foundation
import ImageIO
import MapKit
import Photos
import QuartzCore
import ReplayKit
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
extension Au10tixCore.Au10DataType {
  public var asAu10ErrorEvent: Au10tixCore.Au10ErrorEvent {
    get
  }
}
public enum Au10tixBEKitError : Swift.Error {
  case missingData
  case coreIsInactive
  case mediaServiceIsInactive
  case networkError(error: Swift.Error)
  case serializationError(error: Swift.Error)
  case parseError(error: Swift.Error)
  case cancelled
}
public enum NetworkingError : Au10tixCore.Au10tixError {
  case request(factory: Au10tixCore.NetworkingError.Factory)
  case parsingIssue(factory: Au10tixCore.NetworkingError.Factory)
  case serverError(factory: Au10tixCore.NetworkingError.Factory)
}
extension Au10tixCore.NetworkingError {
  public struct Factory {
    public init(domain: Au10tixCore.Au10ErrorDomain, severity: Au10tixCore.Au10ErrorSeverity, code: Swift.Int? = nil, element: Swift.String? = nil, reason: Swift.String? = nil, recovery: Swift.String? = nil, discussion: Swift.String? = nil, event: Au10tixCore.Au10ErrorEvent? = nil)
    public init(domain: Au10tixCore.Au10ErrorDomain, severity: Au10tixCore.Au10ErrorSeverity, response: Foundation.HTTPURLResponse, discussion: Swift.String? = nil, event: Au10tixCore.Au10ErrorEvent? = nil)
  }
}
extension Au10tixCore.NetworkingError {
  public var category: Au10tixCore.Au10ErrorCategory {
    get
  }
  public var severity: Au10tixCore.Au10ErrorSeverity {
    get
  }
  public var domain: Au10tixCore.Au10ErrorDomain {
    get
  }
  public var code: Swift.Int? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
  public var discussion: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
}
public class Au10tixStaticStorage : Au10tixCore.Au10tixStorage {
  public init()
  public func get<T>(type: T.Type, key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func set<T>(object: T, key: Swift.String) -> Swift.Bool where T : Swift.Decodable, T : Swift.Encodable
  public func remove(key: Swift.String)
  @objc deinit
}
extension Au10tixCore.Au10tixError {
  public var code: Swift.Int? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
  public var discussion: Swift.String? {
    get
  }
  public func report()
}
extension Foundation.NSNotification.Name {
  public static var au10tixCoreTokenExpiration: Foundation.Notification.Name {
    get
  }
  public static var au10tixCoreTokenRenewal: Foundation.Notification.Name {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class BECoreHelper : ObjectiveC.NSObject {
  public static func uploadMedia(type: Au10tixCore.Au10DataType)
  @objc override dynamic public init()
  @objc deinit
}
public struct Au10Error : Au10tixCore.Au10tixError, Swift.Encodable {
  public let category: Au10tixCore.Au10ErrorCategory
  public let domain: Au10tixCore.Au10ErrorDomain
  public let severity: Au10tixCore.Au10ErrorSeverity
  public let code: Swift.Int?
  public let failureReason: Swift.String?
  public let recoverySuggestion: Swift.String?
  public let discussion: Swift.String?
  public let description: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol Authenticator {
  typealias PreparationResult = Swift.Result<Swift.Bool, Au10tixCore.Au10tixCorePrepareError>
  var isActive: Swift.Bool { get }
  func prepare(completion: @escaping (Self.PreparationResult) -> Swift.Void)
}
public struct BIInfo : Swift.Decodable, Swift.Equatable {
  public static func == (a: Au10tixCore.BIInfo, b: Au10tixCore.BIInfo) -> Swift.Bool
  public init(from decoder: Swift.Decoder) throws
}
extension Au10tixCore.BIInfo : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
public enum BIFeature : Swift.String, Swift.Codable {
  case sdc
  case pfl
  case poa
  case nfc
  case afl
  case pc
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum BIDataSource : Swift.Int, Swift.Codable {
  case manual
  case auto
  case external
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BIUserAction : Swift.Int, Swift.Codable {
  case approved
  case retried
  case cancelled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BIAFLStage : Swift.Int, Swift.Codable {
  case pfl
  case afl
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum BINFCPassportStage : Swift.Int, Swift.Codable {
  case mrz
  case nfc
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol Au10tixStorage {
  func get<T>(type: T.Type, key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  func set<T>(object: T, key: Swift.String) -> Swift.Bool where T : Swift.Decodable, T : Swift.Encodable
  func remove(key: Swift.String)
}
@_hasMissingDesignatedInitializers public class Au10tixConfigurationCache {
  public static let shared: Au10tixCore.Au10tixConfigurationCache
  public func uiCompsLogoImage(from url: Foundation.URL?, completion: @escaping (UIKit.UIImage?) -> ())
  @objc deinit
}
public enum ValidationError : Swift.Error {
  case invalidClaim(Swift.String)
  case expired
  case nonce
}
public struct CoreLogManager {
  public static var shared: Au10tixCore.CoreLogManager
  public enum Category : Swift.String {
    case initialization
    case idvFlow
    case f2fFlow
    case poaFlow
    case nfcFlow
    case sdc
    case pfl
    case poa
    case nfc
    case pc
    case vc
    case vs
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
}
public struct Au10NetworkResponse<Body> {
  public let statusCode: Swift.Int
  public let body: Body
}
extension Au10tixCore.Au10NetworkResponse where Body == Foundation.Data? {
  public func decode<BodyType>(to type: BodyType.Type) throws -> BodyType where BodyType : Swift.Decodable
  public func unwrap() throws -> Foundation.Data
}
public protocol JWT {
  var header: [Swift.String : Any] { get }
  var body: [Swift.String : Any] { get }
  var signature: Swift.String? { get }
  var string: Swift.String { get }
  var expiresAt: Foundation.Date? { get }
  var issuer: Swift.String? { get }
  var subject: Swift.String? { get }
  var audience: [Swift.String]? { get }
  var issuedAt: Foundation.Date? { get }
  var notBefore: Foundation.Date? { get }
  var identifier: Swift.String? { get }
  var expired: Swift.Bool { get }
}
extension Au10tixCore.JWT {
  public func claim(name: Swift.String) -> Au10tixCore.Claim
}
public struct RequestData : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Au10ErrorSeverity : Swift.String, Swift.Encodable {
  case error
  case warnig
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol NFCPassportReaderSession {
  func readNFC(with mrz: Swift.String)
}
public typealias Au10tixFileManagerRequesterCompletion = (Swift.Result<Foundation.Data?, Au10tixCore.NetworkError>) -> Swift.Void
public protocol Au10tixFileManagerRequester {
  var urlEndPoint: Swift.String { get }
  func generateRequest(fileEndPoint: Swift.String?) -> Swift.Result<Au10tixCore.Au10NetworkRequest, Au10tixCore.NetworkError>
  func perform(_ request: Au10tixCore.Au10NetworkRequest, _ completion: @escaping Au10tixCore.Au10tixFileManagerRequesterCompletion)
}
extension Au10tixCore.Au10tix {
  public struct Configurations {
    public var dict: [Swift.String : Any] {
      get
    }
    public var secureMeDict: [Swift.String : Any]? {
      get
    }
    public var supportedDocumentsData: Foundation.Data? {
      get
    }
    public var documentClassification: Au10tixCore.DocumentClassificationDTO?
    public var manualCaptureDisableDuration: Foundation.TimeInterval? {
      get
    }
    public var cameraTimeoutDuration: Foundation.TimeInterval? {
      get
    }
    public var isEmpty: Swift.Bool {
      get
    }
    public var isSecureMeConfigurationAvailable: Swift.Bool {
      get
    }
    public var secureMeRequestBackSide: Swift.Bool {
      get
    }
  }
}
open class Log : Swift.Encodable {
  public enum LogType : Swift.String, Swift.Encodable {
    case session
    case sdk
    case backEnd
    case bi
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public init(sessionId: Swift.String? = nil, timestamp: Foundation.Date = Date(), type: Au10tixCore.Log.LogType)
  open func encode(to encoder: Swift.Encoder) throws
  public enum Action : Swift.String {
    case pageLoaded
    case clickStart
    case clickCancel
    case sessionStart
    case autoCapture
    case manualCapture
    case detected
    case notDetected
    case mrzCapture
    case userCancel
    case uploadFromGallery
    case docReplayPassed
    case docReplayFailed
    case docReplayFailedPaper
    case docReplayFailedScreen
    case fecFailed
    case cameraTimeout
    case sessionRefresh
    case retake
    case approve
    case validate
    case livenessPass
    case livenessFail
    case clickHelp
    case chipReadingStarted
    case chipExtractionStarted
    case chipReadingSuccess
    case tryAgain
    case mrzReadingFail
    case mrzReadingManual
    case mrzReadingSuccess
    case chipReadingFail
    case uploadSDCFrontRequest
    case mediaServiceCreateRequest
    case mediaServiceCreateResponse
    case uploadSDCBackRequest
    case uploadSDCFrontResponse
    case uploadSDCBackResponse
    case uploadPFL
    case uploadPFLResponse
    case uploadFF1
    case uploadFF1Response
    case uploadFF2
    case uploadFF2Response
    case uploadPFLVideo
    case uploadPFLVideoResponse
    case uploadPOA
    case uploadPOAResponse
    case uploadPC
    case uploadPCResponse
    case uploadDG1
    case uploadDG1Response
    case uploadDG2
    case uploadDG2Response
    case completeProcessRequest
    case completeProcessResponse
    case nfcClickPassport
    case nfcClickID
    case uploadVC
    case uploadVCResponse
    case uploadVS
    case uploadVSResponse
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @objc deinit
}
public protocol ImageProvidableSession {
  func provide(image: Foundation.Data, exif: [Swift.String : Any], orientation: ImageIO.CGImagePropertyOrientation)
}
public enum Au10tixFileError : Swift.Error {
  case failed(_: Swift.Error? = nil)
  case invalidData
  case busy
  case fileDoesntExist
  case deletionFailed
  case zipFrameworkIsNotAvailable
}
public struct Au10tixFile {
  public var factory: Au10tixCore.Au10tixFileFactory
  public init(factory: Au10tixCore.Au10tixFileFactory)
  @discardableResult
  public func write() throws -> Foundation.URL
  public func replace(content of: Foundation.URL, withContentOf: Foundation.URL) throws -> Swift.Bool
  public func read<T>(_ type: T.Type) throws -> T where T : Swift.Decodable
  @discardableResult
  public func delete() throws -> Swift.Bool
}
extension Au10tixCore.Au10tixFile {
  public func exists() throws -> Swift.Bool
  public func pathString() throws -> Swift.String
  public func pathUrl() throws -> Foundation.URL
}
public enum Au10RequesterError : Swift.Error {
  case generalError(_: Swift.Error? = nil)
  case internalError(_: Swift.Error? = nil)
}
public protocol Au10Requester {
  typealias Au10RequesterResult<T> = Swift.Result<T, Au10tixCore.Au10RequesterError>
  typealias Au10RequesterResponseCompletion<T> = ((Self.Au10RequesterResult<Any>) -> Swift.Void)
  typealias Au10RequesterProgressResponse<T> = ((T) -> Swift.Void)
  typealias Au10IOUInfo = (location: [Swift.Int], size: CoreFoundation.CGSize)
  var isAvailable: Swift.Bool { get }
  func executeRequest(with image: Au10tixCore.Au10Image, finalWidth: Swift.Int?, cameraResolution: CoreFoundation.CGSize?, previousIOUInfo: Self.Au10IOUInfo?, progress: Self.Au10RequesterProgressResponse<Any>?, bypassClassifierValidations: Swift.Bool, completion: @escaping Self.Au10RequesterResponseCompletion<Any>)
}
public struct BeginProcessingIdentityDataForDataVerification : Swift.Codable {
  public var countryIso3: Swift.String?
  public var dateOfBirth: Swift.String?
  public var dateOfExpiry: Swift.String?
  public var dateOfIssue: Swift.String?
  public var documentNumber: Swift.String?
  public var email: Swift.String?
  public var firstName: Swift.String?
  public var firstName2: Swift.String?
  public var fullName: Swift.String?
  public var fullName2: Swift.String?
  public var gender: Swift.String?
  public var ipAddress: Swift.String?
  public var lastName: Swift.String?
  public var lastName2: Swift.String?
  public var middleNames: Swift.String?
  public var nationalityIso3: Swift.String?
  public var personalNumber: Swift.String?
  public var phoneNumber: Swift.String?
  public var profile: Swift.String?
  public var residentialAddress: Swift.String?
  public var userName: Swift.String?
  public init(countryIso3: Swift.String? = nil, dateOfBirth: Swift.String? = nil, dateOfExpiry: Swift.String? = nil, dateOfIssue: Swift.String? = nil, documentNumber: Swift.String? = nil, email: Swift.String? = nil, firstName: Swift.String? = nil, firstName2: Swift.String? = nil, fullName: Swift.String? = nil, fullName2: Swift.String? = nil, gender: Swift.String? = nil, ipAddress: Swift.String? = nil, lastName: Swift.String? = nil, lastName2: Swift.String? = nil, middleNames: Swift.String? = nil, nationalityIso3: Swift.String? = nil, personalNumber: Swift.String? = nil, phoneNumber: Swift.String? = nil, profile: Swift.String? = nil, residentialAddress: Swift.String? = nil, userName: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct MultipartDataBuilder {
  public struct Params {
    public init(name: Swift.String, value: Swift.String?, data: Foundation.Data?, manipulate: Swift.Bool = true)
  }
  public init(boundary: Swift.String)
  public func insert(params: [Au10tixCore.MultipartDataBuilder.Params], to multipart: Foundation.Data) -> Foundation.Data
}
@objc public enum Au10ImageSource : Swift.Int {
  case cameraVideoFrame
  case cameraCapture
  case external
  public var isReadyToProceed: Swift.Bool {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class Au10Image : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var ciImage: CoreImage.CIImage? {
    get
  }
  @objc final public let source: Au10tixCore.Au10ImageSource
  @objc public var context: CoreImage.CIContext?
  @objc public var uiImage: UIKit.UIImage {
    @objc get
  }
  @objc public var pixelBuffer: CoreVideo.CVPixelBuffer? {
    @objc get
  }
  @objc public var width: Swift.Int {
    @objc get
  }
  @objc public var height: Swift.Int {
    @objc get
  }
  @objc public var uiOrientation: UIKit.UIImage.Orientation {
    @objc get
  }
  @objc public var cgOrientation: ImageIO.CGImagePropertyOrientation {
    @objc get
  }
  @objc public init(ciImage: CoreImage.CIImage, source: Au10tixCore.Au10ImageSource)
  @objc public func convertImageToData() -> Foundation.Data?
  @objc public func convertToMaximum(size: CoreFoundation.CGSize)
  @objc @discardableResult
  public func resizeAndFillColor(size: CoreFoundation.CGFloat, fillColor: UIKit.UIColor) -> Au10tixCore.Au10Image
  @objc @discardableResult
  public func crop(at rect: CoreFoundation.CGRect) -> Au10tixCore.Au10Image
  @objc @discardableResult
  public func resize(to size: CoreFoundation.CGSize) -> Au10tixCore.Au10Image
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc @discardableResult
  public func reduceResolution(to maxSizeInMB: Swift.Int) -> Au10tixCore.Au10Image
  @objc deinit
}
public class SDKLogEvent : Au10tixCore.LogEvent {
  public init(feature: Swift.String, category: Swift.String, action: Au10tixCore.Log.Action, subsessionId: Swift.String?, attempt: Swift.Int? = nil, isUi: Swift.Bool = false)
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public struct DocumentClassificationDTO {
  public var fecSelectedCountry: Swift.String?
  public var fecSelectedDocumentType: Swift.String?
}
public struct Au10tixUserDefaultsStorage : Au10tixCore.Au10tixStorage {
  public init()
  public func get<T>(type: T.Type, key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func set<T>(object: T, key: Swift.String) -> Swift.Bool where T : Swift.Decodable, T : Swift.Encodable
  public func remove(key: Swift.String)
}
public struct Au10tixFileManagerStorage : Au10tixCore.Au10tixStorage {
  public init()
  public func get<T>(type: T.Type, key: Swift.String) -> T? where T : Swift.Decodable, T : Swift.Encodable
  public func set<T>(object: T, key: Swift.String) -> Swift.Bool where T : Swift.Decodable, T : Swift.Encodable
  public func remove(key: Swift.String)
}
public class LogReport : Au10tixCore.Log {
  public init(sessionId: Swift.String?)
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum Au10tixCorePrepareError : Swift.Error {
  case badJWT
  case missingUrlInJWT
  case noServerResponse
  case networkError(error: Swift.Error)
  case parsingResponseFailed
  case failedToStartSession(error: Swift.Error)
  case didNotRetainSessionID
  case missingScopeInJWT
}
@_hasMissingDesignatedInitializers final public class Au10Constants {
  public enum ModuleType : Swift.String, Swift.Codable {
    case null
    case core
    case selfie
    case passport
    case passiveFaceLiveness
    case smartDocumentCapture
    case proofOfAddress
    case demoApp
    case backend
    case livenessSession
    case payCard
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Event {
    public enum Environment : Swift.String, Swift.Codable {
      case development
      case production
      case test
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Module : Swift.String, Swift.Codable {
      case mobileSDK
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Category : Swift.String, Swift.Codable {
      case session
      case `init`
      case permission
      case networking
      case licensing
      case requestGenerator
      case customParameters
      case imageProcessing
      case passport
      case imageCapture
      case backend
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Action : Swift.String, Swift.Codable {
      case prepare
      case start
      case stop
      case pause
      case crop
      case captureStillImage
      case location
      case addItem
      case response
      case error
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum Level : Swift.String, Swift.Codable {
      case info
      case error
      case debug
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
  @objc deinit
}
public struct LoggingEngine : Au10tixCore.AnalyticsEngine {
  public func record(event: Au10tixCore.AnalyticsEvent)
}
public struct MediaItem {
  public let dict: [Swift.String : Any]
  public let dataType: Au10tixCore.Au10DataType
  public init(dict: [Swift.String : Any], dataType: Au10tixCore.Au10DataType)
}
public class BIEngine : Au10tixCore.AnalyticsEngine {
  public init?()
  public func record(event: Au10tixCore.AnalyticsEvent)
  @objc deinit
}
public protocol AnalyticsEngine {
  func record(event: Au10tixCore.AnalyticsEvent)
}
public protocol Timeoutable : Au10tixCore.AppLifeCycleEventResponder {
  var session: Au10tixCore.Au10tixSession? { get }
  var timeoutableSessionDelegate: Au10tixCore.TimeoutableSessionDelegate? { get }
  var timeoutTimer: Foundation.Timer? { get set }
  var timeoutInterval: Foundation.TimeInterval { get set }
  var appLifeCycleSessionHandler: Au10tixCore.AppLifeCycleSessionHandler? { get }
  func notifyTimeout()
  func stopTimeoutCountdown()
}
extension Au10tixCore.Timeoutable {
  public func handleBackground()
  public func handleResignActive()
  public func startTimeoutCountdown()
  public func stopTimeoutCountdown()
}
public struct SessionTimeoutInterval {
  public static let short: Swift.Double
  public static let regular: Swift.Double
}
public enum MediaServiceNetworkingError : Swift.Error {
  case serializationError(error: Swift.Error, _: Swift.Int?)
  case networkError(error: Swift.Error, _: Swift.Int?)
  case parsingError(_: Swift.Int?)
  public var statusCode: Swift.Int? {
    get
  }
  public var reason: Swift.String? {
    get
  }
}
public struct Au10tixCameraSettings {
  public var cameraCaptureSound: Au10tixCore.Au10tixCameraSettings.CameraCaptureSound
  public var cameraFlashMode: AVFoundation.AVCaptureDevice.FlashMode
  public var cameraTorchMode: AVFoundation.AVCaptureDevice.TorchMode
  public static var offSettings: Au10tixCore.Au10tixCameraSettings {
    get
  }
  public enum CameraCaptureSound {
    case `default`
    case silent
    case custom(soundFilePath: Swift.String)
  }
}
public enum FlowError : Au10tixCore.Au10tixError {
  case input(factory: Au10tixCore.FlowError.Factory)
  case session(factory: Au10tixCore.FlowError.Factory)
  case timeout(factory: Au10tixCore.FlowError.Factory)
  case general(factory: Au10tixCore.FlowError.Factory)
}
extension Au10tixCore.FlowError {
  public struct Factory {
    public init(domain: Au10tixCore.Au10ErrorDomain, severity: Au10tixCore.Au10ErrorSeverity, element: Swift.String? = nil, reason: Swift.String? = nil, recovery: Swift.String? = nil, discussion: Swift.String? = nil, event: Au10tixCore.Au10ErrorEvent? = nil)
  }
}
extension Au10tixCore.FlowError {
  public var category: Au10tixCore.Au10ErrorCategory {
    get
  }
  public var code: Swift.Int? {
    get
  }
  public var severity: Au10tixCore.Au10ErrorSeverity {
    get
  }
  public var domain: Au10tixCore.Au10ErrorDomain {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
  public var discussion: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
}
public protocol FrontSideSupporter {
  var isFrontSide: Swift.Bool { get set }
  var localClassification: Swift.Bool { get set }
}
public protocol AnalyticsEvent {
  var name: Swift.String { get }
  var metadata: Swift.Dictionary<Swift.String, Any> { get }
  var technicalDetails: Au10tixCore.LoggerInfo? { get }
  var loggingInformation: Au10tixCore.LoggableInfo? { get }
  var errorInformation: Au10tixCore.LoggableInfo? { get }
  var businessIntelligenceInformation: Au10tixCore.BIInfo? { get }
  func record()
}
extension Au10tixCore.AnalyticsEvent {
  public var metadata: Swift.Dictionary<Swift.String, Swift.String> {
    get
  }
  public func record()
}
public struct IDTokenValidation {
  public let issuer: Swift.String
  public let audience: Swift.String
  public init(issuer: Swift.String, audience: Swift.String)
  public func validate(_ jwt: Au10tixCore.JWT, nonce: Swift.String? = nil) -> Au10tixCore.ValidationError?
}
public struct Au10tixWorkflowWrapper {
  public let sessionToken: Au10tixCore.Au10tixWorkflowWrapper.Au10tixToken?
  public let accessToken: Au10tixCore.Au10tixWorkflowWrapper.Au10tixToken?
  public let sasTokens: [Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken]?
  public struct Au10tixToken {
    public let jwt: Swift.String
  }
}
extension Au10tixCore.Au10tixWorkflowWrapper.Au10tixToken {
  public var globalApiURL: Swift.String? {
    get
  }
  public var apiURL: Swift.String? {
    get
  }
  public var bosBaseURL: Swift.String? {
    get
  }
  public var tokenExpirationDate: Foundation.Date? {
    get
  }
  public var clientOrganizationID: Swift.String? {
    get
  }
  public var sessionId: Swift.String? {
    get
  }
  public var availableScopes: [Au10tixCore.Scope]? {
    get
  }
}
public struct LoggerInfo : Swift.Codable {
  public init(file: Swift.String = #file, function: Swift.String = #function, line: Swift.UInt = #line, time: Foundation.Date = Date())
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AssetsManagerConfigurations {
  public var cacheType: Au10tixCore.AssetsManagerConfigurations.CacheType
  public var downloadPolicy: Au10tixCore.AssetsManagerConfigurations.DownloadPolicy
  public var assetsSource: Au10tixCore.AssetsManagerConfigurations.Au10tixAssetSource
  public var didDownloadAssets: Swift.Bool
  public var dic: [Swift.String : Any]?
  public var baseUrl: Swift.String?
  public enum CacheType : Swift.Int {
    case temporarily
    case permanent
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum DownloadPolicy : Swift.Int {
    case onDemand
    case upFront
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public enum Au10tixAssetSource : Swift.Equatable {
    case bundle(_: Foundation.Bundle)
    case server
    public var rawValue: Swift.Int {
      get
    }
    public static func == (a: Au10tixCore.AssetsManagerConfigurations.Au10tixAssetSource, b: Au10tixCore.AssetsManagerConfigurations.Au10tixAssetSource) -> Swift.Bool
  }
}
public enum Scope : Swift.String, Swift.Codable, Swift.CaseIterable {
  case media
  case beginProcessing
  case mobilesdk
  case legacyMobileSdk
  case pfl
  case sdc
  case helmets
  case docreplay
  case frontendClassification
  case paymentCard
  case secureMe
  case ocr
  public init?(rawValue: Swift.String)
  public typealias AllCases = [Au10tixCore.Scope]
  public typealias RawValue = Swift.String
  public static var allCases: [Au10tixCore.Scope] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public class Au10NetworkRequest {
  public struct DefaultValue {
    public static let path: Swift.String?
    public static let headers: [Au10tixCore.HTTPHeader]
    public static let queryItems: [Foundation.URLQueryItem]?
    public static let httpBody: Foundation.Data?
    public static let timeoutInterval: Swift.Double
  }
  final public let method: Au10tixCore.HTTPMethod
  final public let baseURL: Foundation.URL
  final public let path: Swift.String?
  final public let headers: [Au10tixCore.HTTPHeader]?
  final public let queryItems: [Foundation.URLQueryItem]?
  final public let httpBody: Foundation.Data?
  final public let timeoutInterval: Foundation.TimeInterval
  final public let useAbsoluteString: Swift.Bool
  required public init(method: Au10tixCore.HTTPMethod, baseURL: Foundation.URL, path: Swift.String? = DefaultValue.path, headers: [Au10tixCore.HTTPHeader] = DefaultValue.headers, queryItems: [Foundation.URLQueryItem]? = DefaultValue.queryItems, httpBody: Foundation.Data? = DefaultValue.httpBody, timeoutInterval: Foundation.TimeInterval = DefaultValue.timeoutInterval, useAbsoluteString: Swift.Bool = false)
  convenience public init<Body>(method: Au10tixCore.HTTPMethod, baseURL: Foundation.URL, path: Swift.String? = DefaultValue.path, headers: [Au10tixCore.HTTPHeader] = DefaultValue.headers, queryItems: [Foundation.URLQueryItem]? = DefaultValue.queryItems, body: Body, timeoutInterval: Foundation.TimeInterval = DefaultValue.timeoutInterval, useAbsoluteString: Swift.Bool = false) throws where Body : Swift.Encodable
  @objc deinit
}
public enum HTTPMethod : Swift.String {
  case get
  case put
  case post
  case delete
  case head
  case options
  case trace
  case connect
  case patch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct HTTPHeader {
  public let field: Swift.String
  public let value: Swift.String
  public init(field: Swift.String, value: Swift.String)
}
extension Au10tixCore.HTTPHeader {
  public enum Fields : Swift.String {
    case contentType
    case contentLength
    case userAgent
    case authorization
    case sessionID
    case session
    case requestID
    case sdkVersion
    case sdkType
    case eventData
    case xType
    case xSessionId
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Values {
    case json
    case bearer(value: Swift.String)
    case mobileSDK
    case octetStream
    case internalValue
  }
}
extension Au10tixCore.HTTPHeader {
  public init(field: Au10tixCore.HTTPHeader.Fields, value: Au10tixCore.HTTPHeader.Values)
  public init(field: Au10tixCore.HTTPHeader.Fields, value: Swift.String)
}
extension Au10tixCore.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension Au10tixCore.Au10NetworkRequest : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol SessionDetailsAdvertizer : AnyObject {
  var workflowWrapper: Au10tixCore.Au10tixWorkflowWrapper? { get }
  var configurations: Au10tixCore.Au10tix.Configurations { get }
}
public protocol BatchShipper : Au10tixCore.AnalyticsEngine {
  func shipQueuedEvents()
}
public enum ScreenRecorderError : Swift.Error {
  case userDeclined
  case failedToRemoveOldItem(error: Swift.Error)
  case failedToCreateAssetWriter(error: Swift.Error)
  case captureFailed(error: Swift.Error)
  case stopCaptureFailed(error: Swift.Error)
}
public struct LoggableInfo : Swift.Codable {
  public init(level: Au10tixCore.Au10Constants.Event.Level = .info, category: Au10tixCore.Au10Constants.Event.Category? = nil, sessionId: Swift.String? = nil, action: Au10tixCore.Au10Constants.Event.Action? = nil, module: Au10tixCore.Au10Constants.ModuleType? = nil)
  public init(error: Au10tixCore.Au10Error, sessionId: Swift.String?)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Au10SessionCaptureFrameUpdate<Frame> {
}
open class BILog : Au10tixCore.Log {
  public init()
  override open func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let modelName: Swift.String
}
public typealias Au10tixFileManagerCompletion = (Swift.Result<Swift.Bool, Au10tixCore.Au10tixFileError>) -> Swift.Void
open class Au10tixFileManager {
  open var requester: Au10tixCore.Au10tixFileManagerRequester? {
    get
  }
  public init()
  open func download(file: Au10tixCore.Au10tixFile, _ completion: @escaping Au10tixCore.Au10tixFileManagerCompletion)
  open func delete(file: Au10tixCore.Au10tixFile, _ completion: @escaping Au10tixCore.Au10tixFileManagerCompletion)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class Au10tix : ObjectiveC.NSObject, Au10tixCore.Authenticator, Au10tixCore.SessionDetailsAdvertizer, Au10tixCore.Au10tixSDK {
  public static var au10ErrorNotificationCenterKey: Swift.String {
    get
  }
  @objc public static let shared: Au10tixCore.Au10tix
  final public var cameraSettings: Au10tixCore.Au10tixCameraSettings
  final public var assetsManagerConfigurations: Au10tixCore.AssetsManagerConfigurations
  final public var classificationManager: Swift.AnyObject?
  final public var offline: Swift.Bool
  final public var workflowWrapper: Au10tixCore.Au10tixWorkflowWrapper? {
    get
  }
  final public var configurations: Au10tixCore.Au10tix.Configurations {
    get
  }
  final public var isActive: Swift.Bool {
    get
  }
  final public var ocrConfigs: [Swift.String : Any]? {
    get
  }
  final public var lastFECResponse: [Swift.String : Any]?
  final public func prepare(completion: @escaping (Au10tixCore.Au10tix.PreparationResult) -> Swift.Void)
  final public func updateWorkflowWrapper(_ workflow: Au10tixCore.Au10tixWorkflow?)
  final public func isScopesAvailable(_ scopes: [Au10tixCore.Scope]) -> Swift.Bool
  public static func describable(_ object: Any) -> Swift.String
  final public func downloadAssets(completion: (() -> ())? = nil)
  @objc deinit
}
public struct Claim {
  public var rawValue: Any? {
    get
  }
  public var string: Swift.String? {
    get
  }
  public var double: Swift.Double? {
    get
  }
  public var integer: Swift.Int? {
    get
  }
  public var date: Foundation.Date? {
    get
  }
  public var array: [Swift.String]? {
    get
  }
}
public enum Au10DataType : Swift.Int, Swift.Codable, Swift.CaseIterable {
  case pfl
  case idDocFront
  case idDocBack
  case imageForCompare
  case poa
  case nfcDG1
  case personalDetails
  case afl
  case secondImageForCompare
  case pflScreenRecording
  case aflScreenRecording
  case nfcDG2
  case nfcDG7
  case pc
  case vc
  case vs
  case idData
  public var au10tixWorkflowMediaType: Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken.MediaType {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Au10tixCore.Au10DataType]
  public typealias RawValue = Swift.Int
  public static var allCases: [Au10tixCore.Au10DataType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
public class LogEvent : Au10tixCore.Log {
  public init(feature: Swift.String, category: Swift.String, action: Au10tixCore.Log.Action, logType: Au10tixCore.Log.LogType, attempt: Swift.Int? = nil, sessionId: Swift.String? = nil)
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Analytics {
  public static func addEngine(_ engine: Au10tixCore.AnalyticsEngine?)
  public static func getAllEngines<T>(of type: T) -> [T] where T : Au10tixCore.AnalyticsEngine
  public static func record(event: Au10tixCore.AnalyticsEvent, withUniqueEngine: Au10tixCore.AnalyticsEngine? = nil)
  public static func shipQueuedEvents()
  @objc deinit
}
public struct BarcodeReaderReportFromClient : Swift.Codable {
  public init(barcodeDataCollection: [Au10tixCore.BarcodeDataCollection])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BarcodeDataCollection : Swift.Codable {
  public init(points: [CoreFoundation.CGPoint], value: [Swift.UInt8], type: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Au10tixWorkflow : Swift.Codable {
  public let sessionId: Swift.String?
  public let response: Au10tixCore.Au10tixWorkflow.WorkflowResponse?
  public struct WorkflowResponse : Swift.Codable {
    public let session: Swift.String?
    public let accessToken: Swift.String?
    public let assets: [Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken]?
    public struct Au10tixSasToken : Swift.Codable {
      public let assetId: Swift.String?
      public let status: Swift.String?
      public let type: Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken.MediaType?
      public let mimeType: Swift.String?
      public let deleted: Swift.Bool?
      public let attachments: [Swift.String]?
      public let sanitizationStatus: Swift.String?
      public let sasTokenUri: Swift.String?
      public let processedBy: Swift.String?
      public enum MediaType : Swift.String, Swift.Codable {
        case page0
        case page1
        case ff1
        case ff2
        case supp
        case photo
        case pflvid
        case aflvid
        case voiceConsentRecord
        case videoSessionRecord
        case chipdg01
        case chipdg02
        case chipdg07
        case na
        public func mimeType(with type: Au10tixCore.Au10DataType) -> Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken.MimeType
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public enum MimeType : Swift.String, Swift.Codable {
        case png
        case application
        case jpg
        case mp4
        case na
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public class BELogEvent : Au10tixCore.LogEvent {
  public init(feature: Swift.String, category: Swift.String, action: Au10tixCore.Log.Action, isMediaService: Swift.Bool = false, attempt: Swift.Int? = nil, response: Swift.Int? = nil, sessionId: Swift.String? = nil)
  override public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
}
public enum DeviceError : Au10tixCore.Au10tixError {
  public enum Permission {
    case nfcScan
    case camera
    case photoLibrary
    case location
    public static func == (a: Au10tixCore.DeviceError.Permission, b: Au10tixCore.DeviceError.Permission) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Capability {
    case backCamera
    case frontCamera
    case nfc
    case motion
    case gyro
    case location
    public static func == (a: Au10tixCore.DeviceError.Capability, b: Au10tixCore.DeviceError.Capability) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  case permission(factory: Au10tixCore.DeviceError.Factory)
  case memmory(factory: Au10tixCore.DeviceError.Factory)
  case osVersion(factory: Au10tixCore.DeviceError.Factory)
  case capability(factory: Au10tixCore.DeviceError.Factory)
}
extension Au10tixCore.DeviceError {
  public struct Factory {
    public init(domain: Au10tixCore.Au10ErrorDomain, severity: Au10tixCore.Au10ErrorSeverity, permission: Au10tixCore.DeviceError.Permission)
    public init(domain: Au10tixCore.Au10ErrorDomain, severity: Au10tixCore.Au10ErrorSeverity, capability: Au10tixCore.DeviceError.Capability)
    public init(domain: Au10tixCore.Au10ErrorDomain, severity: Au10tixCore.Au10ErrorSeverity, reason: Swift.String, recovery: Swift.String? = nil)
  }
}
extension Au10tixCore.DeviceError {
  public var category: Au10tixCore.Au10ErrorCategory {
    get
  }
  public var severity: Au10tixCore.Au10ErrorSeverity {
    get
  }
  public var domain: Au10tixCore.Au10ErrorDomain {
    get
  }
  public var code: Swift.Int? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
  public var description: Swift.String? {
    get
  }
}
public class SessionTimeoutHandler : Au10tixCore.Timeoutable {
  public var timeoutTimer: Foundation.Timer?
  weak public var session: Au10tixCore.Au10tixSession?
  weak public var timeoutableSessionDelegate: Au10tixCore.TimeoutableSessionDelegate?
  public var timeoutInterval: Foundation.TimeInterval
  public var appLifeCycleSessionHandler: Au10tixCore.AppLifeCycleSessionHandler?
  required public init(session: Au10tixCore.Au10tixSession, sessionDelegate: Au10tixCore.TimeoutableSessionDelegate)
  public func handleForeground()
  public func handleBecomeActive()
  public func notifyTimeout()
  public func applicationStateRequiresTimeoutTimerActivation()
  @objc deinit
}
public struct Au10JWTParser {
  public init()
  public struct JWTPayload {
    public let jwt: Swift.String
    public let globalApiUrl: Swift.String?
    public let apiUrl: Swift.String?
    public let bosUrl: Swift.String?
    public let expirationDate: Foundation.Date
    public let sessionId: Swift.String?
    public let clientOrganizationId: Swift.String
    public let scopes: [Au10tixCore.Scope]?
  }
  public func readPayload(from jwtString: Swift.String) throws -> Au10tixCore.Au10JWTParser.JWTPayload
}
public protocol TimeoutableSessionDelegate : AnyObject {
  func sessionTimedout(_ session: Au10tixCore.Timeoutable)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BOSInteractorCache : ObjectiveC.NSObject {
  public static let shared: Au10tixCore.BOSInteractorCache
  public func append(dict: [Swift.String : Any], type: Au10tixCore.Au10DataType)
  public func retrieveMediaForType(_ type: Au10tixCore.Au10DataType) -> [Swift.String : Any]?
  @objc deinit
}
public class CompositeAnalyticsEngine : Au10tixCore.AnalyticsEngine, Au10tixCore.BatchShipper {
  public init(engines: Au10tixCore.AnalyticsEngine...)
  public func record(event: Au10tixCore.AnalyticsEvent)
  public func shipQueuedEvents()
  public func getAllEngines<T>(of type: T) -> [T] where T : Au10tixCore.AnalyticsEngine
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(AU10JSONRequestGenerator) public class JSONRequestGenerator : ObjectiveC.NSObject {
  public func makeSingleSideRequest(with info: Au10tixCore.RequestDataBuilder.BosTagInfo = nil) throws -> Foundation.Data
  public func makeSingleSideWithPOA(with info: Au10tixCore.RequestDataBuilder.BosTagInfo = nil) throws -> Foundation.Data
  public func makeDoubleSideRequest(with info: Au10tixCore.RequestDataBuilder.BosTagInfo = nil) throws -> Foundation.Data
  public func makeDoubleSideWithPOA(with info: Au10tixCore.RequestDataBuilder.BosTagInfo = nil) throws -> Foundation.Data
  @objc override dynamic public init()
  @objc deinit
}
public enum DecodeError : Foundation.LocalizedError {
  case invalidBase64Url(Swift.String)
  case invalidJSON(Swift.String)
  case invalidPartCount(Swift.String, Swift.Int)
  public var localizedDescription: Swift.String {
    get
  }
}
public struct BeginProcessingPersonalDataForDataVerification : Swift.Codable {
  public let address: Au10tixCore.BeginProcessingAddressWrapper
  public let firstName: Au10tixCore.BeginProcessingFirstName
  public let lastName: Au10tixCore.BeginProcessingLastName
  public init(_ firstName: Swift.String, _ lastName: Swift.String, _ address: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BeginProcessingAddressWrapper : Swift.Codable {
  public let address: Au10tixCore.BeginProcessingAddress
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BeginProcessingAddress : Swift.Codable {
  public let value: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BeginProcessingFirstName : Swift.Codable {
  public let value: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BeginProcessingLastName : Swift.Codable {
  public let value: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BIDataManager {
  public init(feature: Au10tixCore.BIFeature, stage: Swift.Int? = nil, attempt: Swift.Int = 0)
  public mutating func attemptStarted()
  public func attemptEnded(withDataSource dataSource: Au10tixCore.BIDataSource? = nil, evaluationResult: Swift.Bool? = nil, payload: Swift.String? = nil)
  public func userPerformed(action: Au10tixCore.BIUserAction)
  public mutating func setStage(_ stage: Swift.Int)
}
public protocol Au10tixError : Swift.Error {
  var category: Au10tixCore.Au10ErrorCategory { get }
  var domain: Au10tixCore.Au10ErrorDomain { get }
  var severity: Au10tixCore.Au10ErrorSeverity { get }
  var code: Swift.Int? { get }
  var description: Swift.String? { get }
  var failureReason: Swift.String? { get }
  var recoverySuggestion: Swift.String? { get }
  var discussion: Swift.String? { get }
}
open class TokenLifeCycleHandler {
  public init()
  @objc deinit
  @objc open func handleTokenExpiration()
  @objc open func handleTokenRenewal()
}
@objc @objcMembers open class Au10Update : ObjectiveC.NSObject {
  @objc public var quad: Au10tixCore.Au10Quadrangle?
  public var boundingBox: CoreFoundation.CGRect?
  @objc public var data: Foundation.Data?
  @objc public var image: Au10tixCore.Au10Image?
  @objc public var originalImage: Au10tixCore.Au10Image?
  public var topLeft: CoreFoundation.CGPoint? {
    get
  }
  public var topRight: CoreFoundation.CGPoint? {
    get
  }
  public var bottomLeft: CoreFoundation.CGPoint? {
    get
  }
  public var bottomRight: CoreFoundation.CGPoint? {
    get
  }
  @objc public init(image: Au10tixCore.Au10Image?, originalImage: Au10tixCore.Au10Image? = nil)
  @objc public func croppedImage(marginFactor: CoreFoundation.CGFloat = 0.05) -> Au10tixCore.Au10Image?
  @objc deinit
}
public protocol Au10tixSDK : AnyObject {
  static func getSDKVersion() -> Swift.String
}
extension Au10tixCore.Au10tixSDK {
  public static func getSDKVersion() -> Swift.String
  public static func getIteration() -> Swift.String
}
@objc public class Au10Quadrangle : ObjectiveC.NSObject {
  public var topLeft: CoreFoundation.CGPoint
  public var topRight: CoreFoundation.CGPoint
  public var bottomLeft: CoreFoundation.CGPoint
  public var bottomRight: CoreFoundation.CGPoint
  public init(topLeft: CoreFoundation.CGPoint, topRight: CoreFoundation.CGPoint, bottomLeft: CoreFoundation.CGPoint, bottomRight: CoreFoundation.CGPoint, implementRatio: Swift.Bool = true)
  convenience public init?(coordinates: [Swift.Int], implementRatio: Swift.Bool = true)
  public var boundingBox: CoreFoundation.CGRect {
    get
  }
  public func implementRatio(x: CoreFoundation.CGFloat, y: CoreFoundation.CGFloat)
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
final public class Reachability {
  public typealias NetworkReachable = (Au10tixCore.Reachability) -> Swift.Void
  public typealias NetworkUnreachable = (Au10tixCore.Reachability) -> Swift.Void
  public enum Connection : Swift.CustomStringConvertible {
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: Au10tixCore.Reachability.Connection, b: Au10tixCore.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var whenReachable: Au10tixCore.Reachability.NetworkReachable?
  final public var whenUnreachable: Au10tixCore.Reachability.NetworkUnreachable?
  final public var allowsCellularConnection: Swift.Bool
  final public var notificationCenter: Foundation.NotificationCenter
  final public var connection: Au10tixCore.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension Au10tixCore.Reachability {
  final public func startNotifier() throws
  final public func stopNotifier()
  final public var description: Swift.String {
    get
  }
}
public enum Au10ErrorCategory : Swift.String, Swift.Encodable {
  case native
  case network
  case device
  case flow
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias NetworkServiceCompletion = (Swift.Result<Au10tixCore.Au10NetworkResponse<Foundation.Data?>, Au10tixCore.NetworkError>) -> Swift.Void
public struct Au10NetworkClientImpl {
  public init(configuration: Foundation.URLSessionConfiguration = .default)
}
extension Au10tixCore.Au10NetworkClientImpl {
  @discardableResult
  public func perform(_ request: Au10tixCore.Au10NetworkRequest, _ completion: @escaping Au10tixCore.NetworkServiceCompletion) -> Foundation.URLSessionDataTask?
}
final public class ScreenRecorder {
  final public var videoOutputURL: Foundation.URL {
    get
  }
  final public var isMicrophoneEnabled: Swift.Bool
  public typealias Completion = (Au10tixCore.ScreenRecorderError?) -> Swift.Void
  public init(filename: Swift.String)
  @objc deinit
  final public func startRecording(with completion: @escaping Au10tixCore.ScreenRecorder.Completion)
  final public func stopRecording(with completion: Au10tixCore.ScreenRecorder.Completion? = nil)
}
public protocol CameraSession {
  func captureImage(_ source: Au10tixCore.Au10ImageSource)
  func pauseCamera()
  func resumeCamera(_ refresh: Swift.Bool)
  func prefersAspectFillCameraPreview()
  func startVideoRecording(videoUrl url: Foundation.URL)
  func stopVideoRecording()
  func cameraDidSuspend()
  func cameraDidResume()
}
extension Au10tixCore.CameraSession {
  public func captureImage(_ source: Au10tixCore.Au10ImageSource)
  public func prefersAspectFillCameraPreview()
  public func startVideoRecording(videoUrl url: Foundation.URL)
  public func stopVideoRecording()
  public func cameraDidSuspend()
  public func cameraDidResume()
}
public typealias Au10tixSessionAuthenticator = Au10tixCore.Authenticator & Au10tixCore.SessionDetailsAdvertizer
public protocol Au10tixSession : Au10tixCore.Au10tixSDK {
  var uiLicenseKey: Swift.String { get }
  var isAvailable: Swift.Bool { get }
  var isCameraActive: Swift.Bool { get }
  var authenticator: Au10tixCore.Au10tixSessionAuthenticator { get }
  func prepare(completion: @escaping (Swift.Result<Swift.Bool, Au10tixCore.Au10tixCorePrepareError>) -> Swift.Void)
  func start(previewView: UIKit.UIView, refresh: Swift.Bool, didStartHandler: @escaping (Swift.Result<Swift.Bool, Au10tixCore.Au10tixCorePrepareError>) -> Swift.Void)
  func stop()
}
extension Au10tixCore.Au10tixSession {
  public var uiLicenseKey: Swift.String {
    get
  }
  public func prepare(completion: @escaping (Swift.Result<Swift.Bool, Au10tixCore.Au10tixCorePrepareError>) -> Swift.Void)
}
public class ImageDownsampler {
  public init()
  public func scaled(image: CoreImage.CIImage, for size: CoreFoundation.CGSize) -> Foundation.Data?
  public func scale(image: CoreImage.CIImage, withAspectRatioForWidth width: Swift.Int) -> Foundation.Data?
  public func resized(image: CoreImage.CIImage, to size: CoreFoundation.CGSize, retry: Swift.Bool = true) -> CoreImage.CIImage
  public func crop(image: CoreImage.CIImage, for rect: CoreFoundation.CGRect) -> CoreImage.CIImage
  public func resizeAndFillColor(context: CoreImage.CIContext, image: CoreImage.CIImage, size: CoreFoundation.CGFloat, fillColor: UIKit.UIColor) -> CoreImage.CIImage
  public func reduceResolution(image: CoreImage.CIImage, to maxSizeInMB: Swift.Int) -> CoreImage.CIImage
  @objc deinit
}
public struct Au10tixFileFactory {
  public enum Source {
    case directory(_: Foundation.FileManager.SearchPathDirectory, _: Swift.String?)
    case bundle(_: Foundation.Bundle)
  }
  public var name: Swift.String
  public var suffix: Swift.String
  public var source: Au10tixCore.Au10tixFileFactory.Source
  public var downloadPolicy: Au10tixCore.Au10tixFileFactory.DownloadPolicy
  public var isDeletable: Swift.Bool
  public var data: Foundation.Data?
  public init(name: Swift.String, suffix: Swift.String, source: Au10tixCore.Au10tixFileFactory.Source, downloadPolicy: Au10tixCore.Au10tixFileFactory.DownloadPolicy = DownloadPolicy(), isDeletable: Swift.Bool = false, data: Foundation.Data? = nil)
  public struct DownloadPolicy {
    public var isDownloadable: Swift.Bool
    public var endPoint: Swift.String?
    public var password: Swift.String?
    public var zipped: Swift.Bool
    public var zipPath: Swift.String?
    public init(isDownloadable: Swift.Bool = false, endPoint: Swift.String? = nil, password: Swift.String? = nil, zipped: Swift.Bool = false, zipPath: Swift.String? = nil)
  }
}
public enum NetworkError : Foundation.LocalizedError {
  case error(Swift.Error, Swift.Int?)
  case noData(Swift.Int?)
  case invalidURL(Swift.Int?)
  case requestFailed(Swift.Int?)
  case connection
  case timeout(Swift.Int?)
  public var errorDescription: Swift.String? {
    get
  }
  public var statusCode: Swift.Int? {
    get
  }
  public func handleError(_ url: Swift.String? = nil, response: Foundation.URLResponse? = nil) -> Au10tixCore.NetworkError
}
public class LogzIoEngine : Au10tixCore.AnalyticsEngine, Au10tixCore.BatchShipper {
  public init?(urlString: Swift.String)
  public func record(event: Au10tixCore.AnalyticsEvent)
  public func shipQueuedEvents()
  @objc deinit
}
public enum NativeError : Au10tixCore.Au10tixError {
  case error(_: Au10tixCore.NativeError.Factory)
  case scError(_: Au10tixCore.NativeError.Factory)
}
extension Au10tixCore.NativeError {
  public struct Factory {
    public init(domain: Au10tixCore.Au10ErrorDomain, severity: Au10tixCore.Au10ErrorSeverity, error: Swift.Error)
    public init(domain: Au10tixCore.Au10ErrorDomain, severity: Au10tixCore.Au10ErrorSeverity, scError: Swift.Int32, description: Swift.String?)
  }
}
extension Au10tixCore.NativeError {
  public var category: Au10tixCore.Au10ErrorCategory {
    get
  }
  public var severity: Au10tixCore.Au10ErrorSeverity {
    get
  }
  public var domain: Au10tixCore.Au10ErrorDomain {
    get
  }
  public var code: Swift.Int? {
    get
  }
  public var description: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public var recoverySuggestion: Swift.String? {
    get
  }
}
public typealias Au10tixBEKitCallback = (Swift.Result<Swift.String, Au10tixCore.Au10tixBEKitError>) -> Swift.Void
@objc @_hasMissingDesignatedInitializers public class Au10tixBackendKit : ObjectiveC.NSObject, Au10tixCore.Au10tixSDK {
  public var poaUploadOnly: Swift.Bool {
    get
  }
  public static let shared: Au10tixCore.Au10tixBackendKit
  public func shouldOnlyUploadPOA(_ uploadOnly: Swift.Bool)
  public func uploadMediaOf(type: Au10tixCore.Au10DataType, completion: ((Au10tixCore.Au10tixBEKitError?) -> Swift.Void)? = nil)
  public func uploadAllMedias(allowedDataTypes: Swift.Set<Au10tixCore.Au10DataType>? = nil, completion: ((Au10tixCore.Au10tixBEKitError?) -> Swift.Void)? = nil)
  public func beginProcessing(beKitCallback: @escaping Au10tixCore.Au10tixBEKitCallback)
  @objc deinit
}
extension ImageIO.CGImagePropertyOrientation {
  public init(_ orientation: UIKit.UIImage.Orientation)
}
public struct Logger {
  public static var biReportSessionId: Swift.String?
  public static func report(_ log: Au10tixCore.Log)
}
public struct MediaService {
  public func shouldUseMediaService(_ dataType: Au10tixCore.Au10DataType) -> Swift.Bool
  public init()
  public func handleMedia(item: Au10tixCore.MediaItem)
  public func updatePhotoForComparison(_ photoForComparison: Foundation.Data) throws
  public func uploadMedia(of type: Au10tixCore.Au10DataType)
  public func mediaItem(for type: Au10tixCore.Au10DataType) -> Au10tixCore.MediaItem?
}
public class RequestDataBuilder {
  public typealias BosTagInfo = Swift.String?
  public static func bosTag(info: Au10tixCore.RequestDataBuilder.BosTagInfo) -> Swift.String
  public init()
  public func build(with info: Au10tixCore.RequestDataBuilder.BosTagInfo) -> Au10tixCore.RequestData
  @discardableResult
  public func withFrontDocument(with meatadata: Foundation.Data? = nil) -> Au10tixCore.RequestDataBuilder
  @discardableResult
  public func withBackDocument(with meatadata: Foundation.Data? = nil) -> Au10tixCore.RequestDataBuilder
  @discardableResult
  public func withPOA() -> Au10tixCore.RequestDataBuilder
  @discardableResult
  public func withPData(pData: Au10tixCore.BeginProcessingPersonalDataForDataVerification) -> Au10tixCore.RequestDataBuilder
  @discardableResult
  public func withIdData(idData: Au10tixCore.BeginProcessingIdentityDataForDataVerification) -> Au10tixCore.RequestDataBuilder
  @discardableResult
  public func useTag() -> Au10tixCore.RequestDataBuilder
  @discardableResult
  public func use(optionalData: [Swift.String : Swift.String]) -> Au10tixCore.RequestDataBuilder
  @objc deinit
}
public enum Au10ErrorDomain : Swift.String, Swift.Encodable {
  case core
  case sm
  case dm
  case sdcKit
  case sdcUi
  case pflKit
  case pflUi
  case poaKit
  case poaUi
  case nfcKit
  case nfcUi
  case hdUi
  case baseUi
  case secureMeKit
  case pcKit
  case pcUi
  case localDataInferennceKit
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct Au10tixUIValidator {
  public static func isAu10tixUI(licenseKey: Swift.String) -> Swift.Bool
}
public protocol AppLifeCycleEventResponder : AnyObject {
  func handleBackground()
  func handleForeground()
  func handleBecomeActive()
  func handleResignActive()
}
public class AppLifeCycleSessionHandler {
  public init(responder: Au10tixCore.AppLifeCycleEventResponder)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(A0JWT) public class _JWT : ObjectiveC.NSObject {
  @objc public var header: [Swift.String : Any] {
    @objc get
  }
  @objc public var body: [Swift.String : Any] {
    @objc get
  }
  @objc public var signature: Swift.String? {
    @objc get
  }
  @objc public var expiresAt: Foundation.Date? {
    @objc get
  }
  @objc public var expired: Swift.Bool {
    @objc get
  }
  @objc public class func decode(jwt jwtValue: Swift.String) throws -> Au10tixCore._JWT
  @objc deinit
}
extension Foundation.Date {
  public static func - (lhs: Foundation.Date, rhs: Foundation.Date) -> Foundation.TimeInterval
}
public enum Au10ErrorEvent : Swift.Int, Swift.Encodable {
  case deviceErrorPermissionNfcScan
  case deviceErrorPermissionCamera
  case deviceErrorPermissionPhotoLibrary
  case deviceErrorPermissionLocation
  case deviceErrorCapabilityBackCamera
  case deviceErrorCapabilityFrontCamera
  case deviceErrorCapabilityNfc
  case deviceErrorCapabilityMotion
  case deviceErrorCapabilityGyro
  case deviceErrorCapabilityLocation
  case deviceErrorMemmoryGeneral
  case deviceErrorOSVersionGeneral
  case networkingRequestGeneral
  case noInternetConnection
  case requestTimeout
  case invalidURL
  case badJWT
  case missingPFLData
  case missingIdDocFrontData
  case missingIdDocBackData
  case missingImageForCompareData
  case missingPOAData
  case missingNfcDG1Data
  case missingPersonalDetailsData
  case missingAFLData
  case missingSecondImageForCompareData
  case missingPflScreenRecordingData
  case missingAflScreenRecordingData
  case missingNfcDG2Data
  case missingNfcDG7Data
  case missingPCData
  case missingVCData
  case missingVSData
  case missingIdDataData
  case serverIsBusy
  case requestCanceled
  case networkingParsingIssueGeneral
  case responseParsingFailed
  case missingJWTExpiry
  case missingJWTApiUrl
  case missingJWTBosUrl
  case missingJWTOrganizationId
  case missingJWTScopes
  case missingJWTAudience
  case missingJWTIssuer
  case missingJWTBaseUrl
  case missingJWTSessionId
  case networkingServerErrorGeneral
  case requestFailed
  case badResponse
  case flowErrorInputGeneral
  case flowErrorSessionGeneral
  case ocsConfigurations
  case coreInactive
  case failedToStartSession
  case didNotRetainSessionID
  case expiredJWT
  case generalTokenSessionTimeout
  case flowSessionTimeout
  case coreIsOffline
  case flowErrorTimeoutGeneral
  case flowErrorGeneral
  case missingSDCUIFramework
  case missingPFLUIFramework
  case missingPOAUIFramework
  case missingPCUIFramework
  case missingVCUIFramework
  case localSDCClassificationFailed
  case failedToRetreiveAssetFromGallery
  case mrzKeyReadingFailed
  case retriesLimitExceeded
  case screenRecordingFailed
  case methodCalledNotFromTheMainThread
  case captureImageFailed
  case nfcResponseError
  case nfcNotSupported
  case nfcNoConnectedTag
  case nfcUnsupportedDataGroup
  case nfcUnknownTag
  case nfcMoreThanOneTagFound
  case cameraRectInvalid
  case quadrangleGenerationFailed
  case missingTensorFlowLiteFramework
  case missingCoreMLFramework
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct Au10Mirror {
}
extension Au10tixCore.Au10Mirror {
  @discardableResult
  public static func available(className: Swift.String) -> Swift.Bool
  @discardableResult
  public static func instance(name: Swift.String, inClass: Swift.String, framework: Swift.String) -> ObjectiveC.NSObjectProtocol?
  @discardableResult
  public static func property(name: Swift.String, shared: ObjectiveC.NSObjectProtocol) -> ObjectiveC.NSObjectProtocol?
  @discardableResult
  public static func perform(shared: Swift.String, selector: Swift.String, inClass: Swift.String, framework: Swift.String, with object1: Any? = nil, with object2: Any? = nil) -> Swift.Unmanaged<Swift.AnyObject>?
  @discardableResult
  public static func perform(shared: ObjectiveC.NSObjectProtocol, selector: Swift.String, with object1: Any? = nil, with object2: Any? = nil) -> Swift.Unmanaged<Swift.AnyObject>?
  @discardableResult
  public static func get(selector: Swift.String, shared: ObjectiveC.NSObjectProtocol, with object1: Any? = nil, with object2: Any? = nil) -> ObjectiveC.NSObjectProtocol?
}
extension Au10tixCore.Au10DataType : Swift.Equatable {}
extension Au10tixCore.Au10DataType : Swift.Hashable {}
extension Au10tixCore.Au10DataType : Swift.RawRepresentable {}
extension Au10tixCore.BIFeature : Swift.Equatable {}
extension Au10tixCore.BIFeature : Swift.Hashable {}
extension Au10tixCore.BIFeature : Swift.RawRepresentable {}
extension Au10tixCore.BIDataSource : Swift.Equatable {}
extension Au10tixCore.BIDataSource : Swift.Hashable {}
extension Au10tixCore.BIDataSource : Swift.RawRepresentable {}
extension Au10tixCore.BIUserAction : Swift.Equatable {}
extension Au10tixCore.BIUserAction : Swift.Hashable {}
extension Au10tixCore.BIUserAction : Swift.RawRepresentable {}
extension Au10tixCore.BIAFLStage : Swift.Equatable {}
extension Au10tixCore.BIAFLStage : Swift.Hashable {}
extension Au10tixCore.BIAFLStage : Swift.RawRepresentable {}
extension Au10tixCore.BINFCPassportStage : Swift.Equatable {}
extension Au10tixCore.BINFCPassportStage : Swift.Hashable {}
extension Au10tixCore.BINFCPassportStage : Swift.RawRepresentable {}
extension Au10tixCore.CoreLogManager.Category : Swift.Equatable {}
extension Au10tixCore.CoreLogManager.Category : Swift.Hashable {}
extension Au10tixCore.CoreLogManager.Category : Swift.RawRepresentable {}
extension Au10tixCore.Au10ErrorSeverity : Swift.Equatable {}
extension Au10tixCore.Au10ErrorSeverity : Swift.Hashable {}
extension Au10tixCore.Au10ErrorSeverity : Swift.RawRepresentable {}
extension Au10tixCore.Log.LogType : Swift.Equatable {}
extension Au10tixCore.Log.LogType : Swift.Hashable {}
extension Au10tixCore.Log.LogType : Swift.RawRepresentable {}
extension Au10tixCore.Log.Action : Swift.Equatable {}
extension Au10tixCore.Log.Action : Swift.Hashable {}
extension Au10tixCore.Log.Action : Swift.RawRepresentable {}
extension Au10tixCore.Au10ImageSource : Swift.Equatable {}
extension Au10tixCore.Au10ImageSource : Swift.Hashable {}
extension Au10tixCore.Au10ImageSource : Swift.RawRepresentable {}
extension Au10tixCore.Au10Constants.ModuleType : Swift.Equatable {}
extension Au10tixCore.Au10Constants.ModuleType : Swift.Hashable {}
extension Au10tixCore.Au10Constants.ModuleType : Swift.RawRepresentable {}
extension Au10tixCore.Au10Constants.Event.Environment : Swift.Equatable {}
extension Au10tixCore.Au10Constants.Event.Environment : Swift.Hashable {}
extension Au10tixCore.Au10Constants.Event.Environment : Swift.RawRepresentable {}
extension Au10tixCore.Au10Constants.Event.Module : Swift.Equatable {}
extension Au10tixCore.Au10Constants.Event.Module : Swift.Hashable {}
extension Au10tixCore.Au10Constants.Event.Module : Swift.RawRepresentable {}
extension Au10tixCore.Au10Constants.Event.Category : Swift.Equatable {}
extension Au10tixCore.Au10Constants.Event.Category : Swift.Hashable {}
extension Au10tixCore.Au10Constants.Event.Category : Swift.RawRepresentable {}
extension Au10tixCore.Au10Constants.Event.Action : Swift.Equatable {}
extension Au10tixCore.Au10Constants.Event.Action : Swift.Hashable {}
extension Au10tixCore.Au10Constants.Event.Action : Swift.RawRepresentable {}
extension Au10tixCore.Au10Constants.Event.Level : Swift.Equatable {}
extension Au10tixCore.Au10Constants.Event.Level : Swift.Hashable {}
extension Au10tixCore.Au10Constants.Event.Level : Swift.RawRepresentable {}
extension Au10tixCore.AssetsManagerConfigurations.CacheType : Swift.Equatable {}
extension Au10tixCore.AssetsManagerConfigurations.CacheType : Swift.Hashable {}
extension Au10tixCore.AssetsManagerConfigurations.CacheType : Swift.RawRepresentable {}
extension Au10tixCore.AssetsManagerConfigurations.DownloadPolicy : Swift.Equatable {}
extension Au10tixCore.AssetsManagerConfigurations.DownloadPolicy : Swift.Hashable {}
extension Au10tixCore.AssetsManagerConfigurations.DownloadPolicy : Swift.RawRepresentable {}
extension Au10tixCore.Scope : Swift.Equatable {}
extension Au10tixCore.Scope : Swift.Hashable {}
extension Au10tixCore.Scope : Swift.RawRepresentable {}
extension Au10tixCore.HTTPMethod : Swift.Equatable {}
extension Au10tixCore.HTTPMethod : Swift.Hashable {}
extension Au10tixCore.HTTPMethod : Swift.RawRepresentable {}
extension Au10tixCore.HTTPHeader.Fields : Swift.Equatable {}
extension Au10tixCore.HTTPHeader.Fields : Swift.Hashable {}
extension Au10tixCore.HTTPHeader.Fields : Swift.RawRepresentable {}
extension Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken.MediaType : Swift.Equatable {}
extension Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken.MediaType : Swift.Hashable {}
extension Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken.MediaType : Swift.RawRepresentable {}
extension Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken.MimeType : Swift.Equatable {}
extension Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken.MimeType : Swift.Hashable {}
extension Au10tixCore.Au10tixWorkflow.WorkflowResponse.Au10tixSasToken.MimeType : Swift.RawRepresentable {}
extension Au10tixCore.DeviceError.Permission : Swift.Equatable {}
extension Au10tixCore.DeviceError.Permission : Swift.Hashable {}
extension Au10tixCore.DeviceError.Capability : Swift.Equatable {}
extension Au10tixCore.DeviceError.Capability : Swift.Hashable {}
extension Au10tixCore.Reachability.Connection : Swift.Equatable {}
extension Au10tixCore.Reachability.Connection : Swift.Hashable {}
extension Au10tixCore.Au10ErrorCategory : Swift.Equatable {}
extension Au10tixCore.Au10ErrorCategory : Swift.Hashable {}
extension Au10tixCore.Au10ErrorCategory : Swift.RawRepresentable {}
extension Au10tixCore.Au10ErrorDomain : Swift.Equatable {}
extension Au10tixCore.Au10ErrorDomain : Swift.Hashable {}
extension Au10tixCore.Au10ErrorDomain : Swift.RawRepresentable {}
extension Au10tixCore.Au10ErrorEvent : Swift.Equatable {}
extension Au10tixCore.Au10ErrorEvent : Swift.Hashable {}
extension Au10tixCore.Au10ErrorEvent : Swift.RawRepresentable {}
