// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixSecureMeKit
import Au10tixBEKit
import Au10tixBaseUI
import Au10tixCore
@_exported import Au10tixSecureMeKit
import Foundation
import Swift
import UIKit
public protocol SecureMeKitDelegate : AnyObject {
  func secureMeKit(_ kit: Au10tixSecureMeKit.SecureMeKit, hasUpdate update: Au10tixSecureMeKit.SecureMeKitUpdate)
  func secureMeKit(_ kit: Au10tixSecureMeKit.SecureMeKit, didCompleteWith result: Au10tixSecureMeKit.SecureMeKitResult)
  func secureMeKit(_ kit: Au10tixSecureMeKit.SecureMeKit, didFailWith error: Au10tixSecureMeKit.SecureMeKitError)
  func secureMeKit(_ kit: Au10tixSecureMeKit.SecureMeKit, didClose viewController: UIKit.UIViewController)
}
public enum SecureMeKitPrepareError : Swift.Error {
  case prepareFailed(error: Au10tixCore.Au10tixCorePrepareError)
  case ocsConfigurations
}
public enum SecureMeKitError : Swift.Error {
  case kitWasNotPrepared
  case notOnMainThread
  case network(error: Swift.Error)
  case backendKit(error: Swift.Error)
  case sdcUIModuleIsMissing
  case pflUIModuleIsMissing
  case poaUIModuleIsMissing
}
public struct SecureMeKitUIFlowManager {
  public enum Flow {
    case sdcFront
    case sdcBack
    case pfl
    case afl
    case poa
    case complete
    public static func == (a: Au10tixSecureMeKit.SecureMeKitUIFlowManager.Flow, b: Au10tixSecureMeKit.SecureMeKitUIFlowManager.Flow) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum SecureMeKitUpdate {
  case sdcFrontStarted
  case sdcFrontFinished
  case sdcBackStarted
  case sdcBackFinished
  case aflStarted
  case aflFinished
  case pflStarted
  case pflFinished
  case poaStarted
  case poaFinished
  case finalizing
  public static func == (a: Au10tixSecureMeKit.SecureMeKitUpdate, b: Au10tixSecureMeKit.SecureMeKitUpdate) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias SecureMeKitPrepareCallback = (Au10tixSecureMeKit.SecureMeKitPrepareError?) -> Swift.Void
@_hasMissingDesignatedInitializers public class SecureMeKit : Au10tixCore.Au10tixSDK {
  final public let authenticator: Au10tixCore.Au10tixSessionAuthenticator
  convenience public init()
  public func prepare(with bearer: Swift.String, completion: @escaping Au10tixSecureMeKit.SecureMeKitPrepareCallback)
  public func createUI(delegate: Au10tixSecureMeKit.SecureMeKitDelegate) throws -> UIKit.UIViewController
  @objc deinit
}
extension SecureMeKit {
  public func forceFlows(_ flows: [Au10tixSecureMeKit.SecureMeKitUIFlowManager.Flow])
}
public struct SecureMeKitResult {
  public let requestId: Swift.String
}
extension Au10tixSecureMeKit.SecureMeKitUIFlowManager.Flow : Swift.Equatable {}
extension Au10tixSecureMeKit.SecureMeKitUIFlowManager.Flow : Swift.Hashable {}
extension Au10tixSecureMeKit.SecureMeKitUpdate : Swift.Equatable {}
extension Au10tixSecureMeKit.SecureMeKitUpdate : Swift.Hashable {}
