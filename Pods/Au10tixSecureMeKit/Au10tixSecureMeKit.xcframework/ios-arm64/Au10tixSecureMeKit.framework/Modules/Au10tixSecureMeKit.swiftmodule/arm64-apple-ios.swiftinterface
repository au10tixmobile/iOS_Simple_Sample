// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Au10tixSecureMeKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Au10tixBaseUI
import Au10tixCore
@_exported import Au10tixSecureMeKit
import Foundation
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public protocol SecureMeKitDelegate : AnyObject {
  func secureMeKit(_ kit: Au10tixSecureMeKit.SecureMeKit, hasUpdate update: Au10tixSecureMeKit.SecureMeKitUpdate)
  func secureMeKit(_ kit: Au10tixSecureMeKit.SecureMeKit, didCompleteWith result: Au10tixSecureMeKit.SecureMeKitResult)
  func secureMeKit(_ kit: Au10tixSecureMeKit.SecureMeKit, didFailWith error: Au10tixSecureMeKit.SecureMeKitError)
  func secureMeKit(_ kit: Au10tixSecureMeKit.SecureMeKit, didClose viewController: UIKit.UIViewController)
}
public enum SecureMeKitPrepareError : Swift.Error {
  case prepareFailed(error: Au10tixCore.Au10tixCorePrepareError)
  case ocsConfigurations
}
public enum SecureMeFlow {
  case sdcFront(_: Au10tixSecureMeKit.SecureMeFlowConfig)
  case sdcBack(_: Au10tixSecureMeKit.SecureMeFlowConfig)
  case pfl(_: Au10tixSecureMeKit.SecureMeFlowConfig)
  case vc(_: Au10tixSecureMeKit.SecureMeFlowConfig)
  case vs(_: Au10tixSecureMeKit.SecureMeFlowConfig)
  case poa(_: Au10tixSecureMeKit.SecureMeFlowConfig)
  case sdcOcr(_: Au10tixSecureMeKit.SecureMeFlowConfig)
}
extension Au10tixSecureMeKit.SecureMeFlow : Swift.Equatable {
  public static func == (lhs: Au10tixSecureMeKit.SecureMeFlow, rhs: Au10tixSecureMeKit.SecureMeFlow) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class MarkdownView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public var isScrollEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var onTouchLink: ((Foundation.URLRequest) -> Swift.Bool)?
  @objc @_Concurrency.MainActor(unsafe) public var onRendered: ((CoreFoundation.CGFloat) -> Swift.Void)?
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) convenience public init(css: Swift.String?, plugins: [Swift.String]?, stylesheets: [Foundation.URL]? = nil, styled: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension Au10tixSecureMeKit.MarkdownView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) dynamic public func load(markdown: Swift.String?, enableImage: Swift.Bool = true, css: Swift.String? = nil, plugins: [Swift.String]? = nil, stylesheets: [Foundation.URL]? = nil, styled: Swift.Bool = true)
  @_Concurrency.MainActor(unsafe) public func show(markdown: Swift.String)
}
extension Au10tixSecureMeKit.MarkdownView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
public enum SecureMeKitError : Swift.Error {
  case kitWasNotPrepared
  case notOnMainThread
  case network(error: Swift.Error)
  case backendKit(error: Swift.Error)
  case sdcUIModuleIsMissing
  case pflUIModuleIsMissing
  case vcUIModuleIsMissing
  case poaUIModuleIsMissing
  case pcUIModuleIsMissing
  case noScope
}
public enum SecureMeKitUpdate {
  case vcStarted
  case vcFinished
  case vsStarted
  case vsFinished
  case sdcFrontStarted
  case sdcFrontFinished
  case sdcBackStarted
  case sdcBackFinished
  case sdcOcrStarted
  case sdcOcrFinished
  case pflStarted
  case pflFinished
  case poaStarted
  case poaFinished
  case finalizing
  public static func == (a: Au10tixSecureMeKit.SecureMeKitUpdate, b: Au10tixSecureMeKit.SecureMeKitUpdate) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct SecureMeFlowConfig {
  public init(showIntro: Swift.Bool = true, enableFileUpload: Swift.Bool = true, sendFeatureResult: Swift.Bool = true, localClassification: Swift.Bool = false)
}
public struct SecureMeConfig {
  public init(flows: [Au10tixSecureMeKit.SecureMeFlow], smConfig: Au10tixSecureMeKit.SecureMeFeaturesConfig)
}
public typealias SecureMeKitPrepareCallback = (Au10tixSecureMeKit.SecureMeKitPrepareError?) -> Swift.Void
@objc @_hasMissingDesignatedInitializers public class SecureMeKit : ObjectiveC.NSObject, Au10tixCore.Au10tixSDK {
  final public let authenticator: Au10tixCore.Au10tixSessionAuthenticator
  convenience public init(animationImageAsset: Au10tixBaseUI.DynamicUIImage = .empty)
  @objc deinit
  public func prepare(completion: @escaping Au10tixSecureMeKit.SecureMeKitPrepareCallback)
  public func createUI(config: Au10tixSecureMeKit.SecureMeConfig? = nil, delegate: Au10tixSecureMeKit.SecureMeKitDelegate) throws -> UIKit.UIViewController
}
public struct SecureMeKitResult {
  public let requestId: Swift.String
}
public struct SecureMeFeaturesConfig {
  public let pflDetectionDelayEnabled: Swift.Bool
  public let pflDelay: Foundation.TimeInterval
  public let sendResults: Swift.Bool
  public let voiceConsentText: Swift.String?
  public let voiceConsentSessionTime: Swift.Int
  public let videoSessionText: Swift.String?
  public let videoSessionIdSessionDuration: Swift.Int
  public let videoSessionVoiceSessionDuration: Swift.Int
  public init(pflDetectionDelayEnabled: Swift.Bool = false, pflDelay: Foundation.TimeInterval = 0, sendResults: Swift.Bool = true, voiceConsentText: Swift.String? = nil, voiceConsentSessionTime: Swift.Int = 20, videoSessionText: Swift.String? = nil, videoSessionIdSessionDuration: Swift.Int = 5, videoSessionVoiceSessionDuration: Swift.Int = 5)
}
extension Au10tixSecureMeKit.SecureMeKitUpdate : Swift.Equatable {}
extension Au10tixSecureMeKit.SecureMeKitUpdate : Swift.Hashable {}
